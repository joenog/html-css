}} MODULO 1

- Aprenderemos conceitos bacisos, preparação do ambiente, semantica da HTML5,
textos titulos, ligações, multimidia e estilos

[HTML E CSS - Livros para estudo!]
1. Material de apoio(gitHub Gustavo Guanabara)  2. Referencias  Online (video 5)

-HTML BASICO 
Linguagem de Marcação de Hypertexto (HTML - Hypertext Markup Language) é o código que você
usa para estruturar seu conteúdo web, dando significado e propósito. Por exemplo, meu conteúdo
é organizado em parágrafos, ou em uma lista de pontos? Eu tenho imagens na minha página? 
Eu tenho uma tabela de dados? Sem pressionar você, o HTML básico provê informação suficiente 
para você se familiarizar com HTML.

-CSS básico
Folhas de Estilo em Cascata (CSS - Cascading Stylesheets) é o código que você usa para dar
estilo ao seu site. Por exemplo, você quer que seu texto seja preto ou vermelho? Onde o conteúdo
deve aparecer na tela? Quais imagens ou cores de fundo devem ser usadas para decorar seu site? 
CSS básico provê o necessário para você começar.

-JavaScript básico
JavaScript é a linguagem de programação que você usa para adicionar recursos interativos
ao seu site. Alguns exemplos podem ser jogos, coisas que acontecem quando botões são 
pressionados ou dados que são inseridos em formulários, efeitos dinâmicos de estilo, 
animação e muito mais. JavaScript básico vai te dar uma ideia do que é possível com essa
excitante linguagem de programação e como começar a usá-la.
__________________________________________________________________________

}} Como a internet chaga na minha casa?

    A internet nasceu durante o periodo de guerra fria, depois da segunda guerra mundial,
duas potencias sairam dos conflitos com muito pdoer, sendo elas, A união sovietica
e os Estados unidos. Estas duas potencias travaram um disputa mental uma tentando
ser melhor que a outra. Nisso um dos presidentes do exercitos dos USA inicia uma agencia
de inteligencia militar a (DARPA) . Com a intenção de manter dados de inteligencia do
país seguros, os USA criaram uma pequena rede a (ARPANET) inicialmente com pontos
interligados com todos mantendo uma backup dos dados obtidos naquela época.
Para a comunicação entre os computadores foi criado o protocolo (NCP) uma linguagem
unica para diferente computadores. O protocolo (NCP) depois de um tempo se tornou
obsoleto, então Bob Kahn criou o (TCP) com a função de tornar a comunicação melhor mas
havia outro problema em relção a identificação do ip das maquinas que estava espalhadas por 
todos os USA, então outro pesquisado Vint Cerf criou otro protocolo de identificação de
maquinas o (IP) e à partir da descoberta desses dois pesquisadores foi unificada as ideias 
então nasceu o (TCP-IP) o protocolo que usamos até hoje, [hoje esse protocolo está bem atualizado]
    Depois de anos de evolução essa rede se tornou gigantesca em todo o pais, então o GOV 
decidiu separa uma rede menor para os militares, universidades, e outra rede para o comercio
mas o ideal era que todas a redes se comunicassem então a rede militar se manteve isolada, 
e todas as outras redes continuaram se comunicando, assim nasceu a (internet)
[internet] um conjuto varias rede - (www.submarinecablemap.com)
__________________________________________________________________________

}} Como a internet Funciona ?

    Representação de dados um BIT é  0 || 1, mas apenas esse dois numeros não conseguem representar 
muita coisa, então é reunido 8 bits [0100 0001] A quantidade minima para a representação de 
dados chamado byte (então 1 byte é a sequencia de 8 bits)  [0100 0001] == A  
mais info procure (codigo multibyte - UTF-8) 
    Esse codigo multibyte usa de 1 à 4 byte para representar coisas como letras maiusculas e minus,
numeros, letras acentuadas e até amojis (o computador entederá tudo como 0=zeroz e uns)
o computador entende ondas binarias (quadradas) tendo dois estados _┌┐_┌┐_┌┐_┌┐_ 
    
       8 bite == 1byte
    1024 byte == 1KB _ kilobyte           ((0 1) 2 elevado a 10 == 1024)
    1024 KB   == 1Mb _ megabyte
    1024 MB   == 1GB _ gigabyte
    1024 GB   == 1TB _ terabyte
    1024 TB   == 1PB _ petabyte           e assim sucessivamente

Representação - 1MB maisculo refere-se á Megabytes || 1Mb minusculo refere-se a megabits
    Quando folo de armazenamento uso o termo Megabyte
    ex: PenDrive de 8 Giga (gigabyte) um HD de 1 Tera (terabyte)

    Quando falo de transmição uso o termo Megabits
    ex: Placa de rede de 100Megas (megabits)  Minha internet é de 60Megas (megabits)
---------------------------------

}} Como conectamos a INTERNET

    Quando voc acessa a internet seu dispositvo é chamado de CLIENTE, isso porq voc está fazendo 
o uso de um serviço, voc quer ter acesso a um produto e tudo que voc requere está na internet
uma rede mundial de servidores. Temos então os computadores que recebem e entendem apenas ondas
binarias (quadradas), enquanto isso temos as antenas responsaveis de transmitir os dados dos
servidores localizados no mundo e essas só transmitem atravezs de ondas SENOIDAL.
    Então para que haja a comunicação entre servidor e cliente precisamos de um MODEM, esse 
é responsavel de fazer a converção das condas. Transformando as ondas  quadradas na SENOIDAL
processo chamado de (MOdulação), e também faz o contrario transformando a onda senoidal em 
ondas quadradas, quando os dados chegam das antenas ao modemrecebendo o nome de (DEModulação)
por isso o nome MODEM. (para fazer o processo de MODULAÇÃO e DEMODULAÇÃO) assim conseguimos
acessar os servidores espalhados no mundo. (img001)

}} DNS - Domain Name Sistem

    É o DNS que permite que você digite o nome de um domínio, como tecnoblog.net na barra de 
endereços, em vez de uma longa sequência de números difícil de decorar.
Em termos simples, o Sistema de Nomes de Domínio (DNS) é uma coleção de bancos de dados que
 traduz nomes de host para endereços únicos de IP.
    Fazemos a requisição pelo endereço nome do site, que é enviado ao DNS, então o DNS contém
em seu banco de dados o numero do IP atual do destino requerido, e nos devolver o ip com isso
conseguimos acesar os sites.
------------------------------

}} Oq É DOMINIO E HOSPEDAGEM

    Como as outrs pessoas veem os sites que eu crio ?
    Você como cliente requere ao DNS um site pela URL, o DNS te retorna o enderço de IP
e você consegue ter acesso ao servidor e aos arquivos HTML e CSS que estão armazenados 
nessa URLS. Isso pdoe ser feitos por varios cliete mundo a fora
    Quando vocÊ cria arquivos HTML e CSS no seu pc, consegue ter acesso total a esse 
arquivos, e para que outros consigam ter a cesso a esse arquivos você precisa ospeda-lo
preciso ter um dominio e ospedar o site num servidor(local onde ficará armazenado os 
arquivos HTMLCSS..)
    DOMINIO     - nome que identifica o seu site
    HOSPEDAGEM  - local onde fica armazenados os aruivos
Os dominios são unicos e pagos anumalmente (há dominios gratuitos)
A hospedagem é paga mensalmente (há hospedagem gratuita ex: github, blogger..)
Na hospedagem atente a (quantidade de memoria fornecida, resusos entre outros..)

--------------------------
}} dissecando URL   (URL - Localizador de recurso Unico)
EX:    [https://www.github.com/gustavoguanabara]
    www.    [sub-dominio]
    .github [dominio]
    .com    [TLD - top level domain]  (gTLD) generic domain como .com .org .net
    Temos os (ccTLD) coutry code - codigo de pais .br  .us .ru
    /guanab [caminho] um caminho dentro do site (tudo isso está dentro de uma URL)
__________________________________________________________________________

}} A difereça entre HTML E CSS

[HTML] HYPERTEXT MARKUP LANGUAGE - A Linguagem de marcação para hipertexto (marcas para titulos
paragrafos, listas etc..) hypertexo são texto textos como links que te levam para outro local
HTML - Linguagem para Marcação de texto, onde semanticamente defino posição e categorias
de determinados textos para que tudo fico organizado.
 - A HTML é uma linguagem focada em conteudo como: (textos, imagens, videos, tabelas etc..)
os atrativos visuais são dados pelas CSS focada em desgin: (cor, sobra, tamanhos, psoicionamento)
As css se faz muito necessaria para que o site seja atrativo aos olhos dos clientes

[CSS] As css são CASCADING STYLE SHEETS - Folhas de estilo em cascata
(em cascata pooq uma vai mudadando a caracteristica padrao da outra) adicionadas nos seletores

[JavaScript] Linguagem de PROGRAMAÇÃO resposanvel pela interatividade dos sites
como: (menus interativos, animações, popUp, aletas etc...)
Essa é a triade de desenvolvimento WEB
__________________________________________________________________________

}} [Primeiros Passo HTML]

    Para a formatação do texto usaremos as tags <>, a maiorias das tags tem abertura e fechamento
temos tags de textos, paragrafos, fotos etc..
    No inicio do head temos a tag lang = devemos inserir nosso idioma, para que haja o uso correto
de caracteres na hora de carregar a pagina (pt-br)
    <head> A areda da cabeça, parte de configuração do site
    <body> A area do corpo do site, area de conteudo onde podemos inserir outras tags
    <charset> defidino como UTF-8 padrão de condificação de caracteres que suporta letras acentuadas
    viewPort = Escala de visualização do conteudo, 1.0 signf. 100% da tela
    
__________________________________________________________________________

}} [SEMANTICA DO HTML 5]
 
    O que é semantica ? :num sistema linguístico, o componente do sentido das palavras e da
interpretação das sentenças e dos enunciados. (tem mais valor o significado que a forma)
    No html mais antigo algumas tagas se focaba mais na forma na parencia do texto, hoje
com a lingua mais atualizada o HTML 5 foca mais na semanatica. Ante a tag b> deixava o texto
com uma forma mais grossa, essa foi substiuido por strong> que semanticamente não apenas
deixa a tag mais grossa  mas tmb semanticamente traz um significado maior para o texrt que está
dentro dessa  tag, fazendo com que os mecanimos de buscar a identifique como algo importante.
-- ATENTE-SE (Usando tags antigas num site, faz com que esse site seja desvalorizado pelo google)

TAGS SEMANTICAS  EX:
<address> Para endereços </address>
<strong> Para dar enfase a um texto
<sup> para adicionar potencias
<sub> para adionar potencias abaixo 
<abbr> Para dar descrição a determinados termos
Posso digitar um comando em JavaScript e melhor sua demonstração usando a tag <code>
    <code> getElementById('#num') </code>
    Isso trara uma  melhor demosntração ao codigo, facilitando a leitura
- Ja para organizar com identação uso a tag <code> dentro da  tag <pre>

CITAÇÃO envelopo a citação na tag <q>
<q>Como diria um pai de um maigo, o computador é um burro muito rapido</q>
__________________________________________________________________________


}} [DIV - SEMANTICAS]

A tag [<header> representa um cabeçalho que pode conter informações introdutórias contextualizadas.
“Contextualizadas” no sentido de que o significado desse cabeçalho depende do contexto em que ele
se encontra: se é filho imediato de <body>, por exemplo, trata-se do cabeçalho geral da página; 
se está em uma <section> (que será vista mais abaixo), é o cabeçalho dela e; assim por diante.

A tag [<main> indica qual parte do documento contém o conteúdo principal.
Entende-se como conteúdo principal aquele relacionado diretamente com o tópico central da página
ou com a funcionalidade central da aplicação. Algo importa é que só pode haver 1 tag <main>
por documento. A porção do conteúdo principal deve ser única e individual.

A tag [<footer> indica qual é o rodapé daquele contexto em que a tag se encontra.
Por exemplo, se for geral da página, pode conter informações de contato, copyright, navegação etc; 
se estiver dentro de uma <article>, é um rodapé daquele elemento, então, semanticamente
está vinculada a esta seção.

A tag [<nav>, como indica o próprio nome, representa uma navegação do site.
“Ahh, mas se eu colocar uma lista não-ordenada com links, isso já não é uma navegação?”
Sim, mas, semanticamente, ela pode não ser uma navegação principal ou muito importante da página
em questão. Nem todos os links de um documento devem estar dentro de um elemento <nav>, 
que é destinado apenas para grupos importantes de links de navegação.

A tag [<section> existe para agrupar conteúdos por temas ou assuntos, representando uma seção
daquela página do site ou tela do aplicativo.
Pode haver múltiplos elementos <section> por página (afinal, é possível ter várias seções)
e eles podem ter seus próprios <header>, <footer> e <aside>.
O interessante é que, por atribuir significado de seção dentro de uma página, o elemento pode
conter títulos e subtítulos sem ferir a semântica.

A tag [<aside> se destina a receber conteúdo relacionado ao contexto em que a tag se encontra.
O importante a notar é que se trata de um conteúdo secundário: uma espécie de observação ou 
complemento; algo tangencialmente relacionado.
Se estiver dentro de uma <section> ou <article>, é relacionado a ela; se for filho imediato 
de <body>, é um conteúdo relacionado geral e; assim por diante.
Evidentemente, pode haver vários <aside> por página, já que é o conteúdo que vai ditar o uso
semântico correto do elemento e, a depender do tópico, vários podem ser necessários.

}} Para q haja maior compatibilidade principalmente com as tags novas da HTML 5 devemos usar
o SHIV  
<!--[if lt IE 9]>
    <script src="bower_components/html5shiv/dist/html5shiv.js"></script>
<![endif]-->

HTML5 Shiv é um script criado para fazer com que os navegadores que não reconheçam as novas
tags HTML5, passem a reconhecê-las. Para utiliza-lo basta chamá-lo dentro da sua tag <head>.
__________________________________________________________________________


}} [LISTA ORDENADAS, NÃO ORDERADAS e LISTA DE DEFINIÇÃO]

    As listas são usadas principalmente para criação de menus visualmente, não se comportam
como menu, então devemos usar as css e o JavaScript, para termos o resultado esperado.
na tag ul - ol (podemos adicionar o atributo type=" ") que nos permitirá editar o indicador 
das lista aqui alguns EX: (disc, circle, square, ex003.html)
}Na lista ordenada terei apenas marcadores, nas ordenas terei marcador de
numeração, por isso o noem ordenada. EX: ol (type="A, a, I i, 1"). 
Posso iniciar uma lista ordanenda  ol a partir de outro numero com a Atribuição (start="4")
    Posso mesclar duas listas seja ela OL - UL fazendo o aninhamento, colocando OL dentro
da lista UL, e o inverso tambem, organinzando uma dentro da outra. (ex009/pratica002)
e mescando-as posso organiza-las alfabeticamento com atributos Type e Start.

--Lista de definição tags
<dl Lista de definição             <dl
<dt Termo da definição                <dt> Chave <dt>
<dd Descrição                           <dd> Objeto usado para abrir portas
__________________________________________________________________________

}} [LINKS ]

    Usamos os links para redirecionarmos os nosso visitantes a outras partes do site algo muito
importante quanto a organização do codigo e paginas e a nomenclatura, devemos usar o nome INDEX.html
para nossa pagina principal para que o servidor onde o site esteja ospedado possa indetifica-la 
e carrega-la primeiramente, 
    Para links usamos a tag  (a  <a href=""> VOLTAR </a>) anchor = ancora. Essa é a estrutura da tag.
Usamos os links para direcionarmos os clientes da pagina index/indice para outras partes do site
como contato, noticias, ou até mesmo nas materias escritas direcionando outras fontes/sites.
]<a href=""> VOLTAR </a>   =  a: anchor  href: hiperlink e reference
    Sempre que redirecionarmos um usuario para um site de terceiro, é bom que usemos o atributo
    - target="_black"  Pra que seja aberta uma nova pagina e o user continue no seu site, adicione tmb
    - rel="_external"  Pra indicar que o conteudo estará fora do site

    Caso use um link que leve o usuario para outras praginas do seu proprio site use os atributos
    - target="_self"  /  - rel="next" para proxima magina
    - rel="prev"  para paginas anteriores
    - rel="autor" para levar o cliente ao site do autor do texto mencionado
    - rel="nofollow  para levar o cliente a um link de site não endoçado, como link pago
    - rel="noopener"  atualmente usa-se a tag noopener para não dar acessoa ao link externo 
    a seu site deixando-o mais protegido (no opner / não opor)
    }} Atente-se aos caminhos onde os arquivos das paginas estão

LINKS PARA DOWNLOAS
    Para baixar um arquivo decolo adicionar o atributo a tag <a download="livro.pdf"
    donwload + nome do aquivo - ou type="application/pdf"
    com o nome application/ formato do arquivo. Com isso farei o download do arquiv, infelizmente
    alguns navegadores acabam abrindo o arquivo diretamente sem fazer o download


(SEO - Otmização para mecanismo de busca) VocÊ de organizar seu codigo HTML, justamente para os
mescanismos de buscas como Google, Encontrar seu site
__________________________________________________________________________

}} [IMAGENS ADAPTAVEIS]

    Para a criação de um site o tamanho das imagens são importantes, precisamos priorizar imagens
mais leves e com qualidade. Tambem devemos ocnsiderar que varios tamanhos de telas podem acessar
nosso site com isso precisamos adaptar essas imagens a tamanhos diferentes de telas, criando um 
conteudo responsivo. Veja a seguir a tag que envolve varios tamanhos de imagens
    <picture> envolvo varias tags img dentro da tag picture + tag <source type, para que seja
    mostrado a imagens corrspondente ao tamanho da tela. Veja o codigo a seguir!

    <picture>
    // se a resolução maxima da tela for menor 600px carregará imagem-p
        <source media="(max-width: 600px)" srcset="imagens/foto-p.png" type="image/png">
        <source media="(max-width: 1090px)" srcset="imagens/foto-m.png" type="image/png">
        <img src="imagens/foto-g.png" alt="imagem flexivel">
    </picture>

    } PARA definir um agrupamente do imagens em linhas defino em CSS (display: inline)

Quanto melhor for seu codigo pensando no cliente, melhor será sua taxa de aprovação dada pelos
mecanismos de buscas, fazendo com que seu site seja cada vez mais recomendado.
__________________________________________________________________________

}} [MIDIAS - AUDIOS E VIDEOS]

Hoje em dia é mais comum usarmos videos em nosso sites, vejamso algumas tags

    <audio - usamos a tag audio mais os atributos (controls autoplay) para que seja mostrado
    e consigamso execultar o audio inserido.
    Caso eu queira adicionar varios fomatos de audio como (wav, mp3 ogg) devo fazer como imagens
adaptaveis crio tag <audio </audio e dentro delas como a tag source:src, semre adicionado a 
atenção do arquivo no atributo type="", veja o exemplo.

    <audio controls autoplay>
        <source src="midia/Summer.mp3" type="audio/mpeg">
        <source src="midia/Enough - NEFFEX.mp3" type="audio/ogg">
        <p> Mensagem caso navegador não reproduza, coloco um paragrafo no fim com aviso </p>
    </audio>
A ordem de carregamento será considerada pela psoição do audio 1º, 2º ...

ATRIBUTOS DA TAG
controls (mostra player)  autoplay(inicia reproduzindo)   loop(reproduz continuamente)
preload="metadata" (carrega informações do audio)
preload="none"     (não carrega nada apenas o player)
----------------------------------
Para inserir videos hospedados localmente é bem parecido, type src, esoclho e video e pronto.

        <video controls preload="none" width="500px">
            <source src="midia/meuvideo (video-converter.com).webm" type="video/webm">
            <source src="midia/meuvideo.mp4" type="video/mp4">
            <p>Seu navegador não reconheceu nenhum formato de video :/</p>
        </video>

}IMPORTANTE - Se precisar colocar videos num site, considere a possiblidade de hospedalo no
youtube e incorporalo no seu site, assim você consumirá menos dados do servidor que tem
contratado.
__________________________________________________________________________


}} [TABELAS ]

    Usamos as tabelas na internet para tabular dados, para criar usamos as tags (table, tr, td)
(table, tr: linhas/ vertical - td: colunas/ horizontal) As tags que compoem uma tabela são:
<table  <thead  <tbody   <th  <td   <tfooter. Nalgumas delas posso color atributos como: 
border="2"  /  width="100%" (atributos objetivos sobrepoem as CSS)
} width 100% faz comq o objeto se redimensione junto a página, tornando responsivo

}ATRIBUTOS EXTRAS [colspan - rowspan]
uso o atributo colspan="2" para unir duas colunas   (colspan / col= coluna > span = expandir)
uso o atributo rowspan="2" para unir duas linhas    (rowspan / row= linhas > span = expandir)

    <!--Hierarquia de tabelas simples
    1 Tabble = tabela                        (table)
        2 table row = linha de tabela           (tr)
            3 table Header = cabeçalho de tabla (th)
                4 table data = dados de tabela  (td)
    -->
    <table>
        <thead>
            <tr> (PRIMEIRA LINHA)
                <th>ESTADO</th>     (TH - PRIMEIRO TIRULO tfooter)
                <th>POPULAÇÃO</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>São Paulo</td> 
                <td>46.649.132</td>
            </tr>
[No estilo posso mudar a posição dos dados na tabal com:
text-align: center;
vertical-align: top;] middle, bottom, top

Uso a tag ( overflow-x: auto; ) para rolar larteralmente uma tabela, evitando a quebra 
e o scroll lateral
__________________________________________________________________________


}} [FORMULARIOS ]

    Dentro de um formulário você pode preencher alguns dados para que os mesmos sejam processados
por uma linguagem de programção nomalmente em php, para que esses formularios sejam processados
as tags dos formularios são varias como : (radio (circulos selecionaveis) input text, number etc..)
    Os formularios são usados para capturarmos dados dos usuarios

<form>  Iniciamos o formulário com a tag form, nela colocarei tudo que pertence ao formulário
<div --- Uso a tag div para envolver as tags abaixo criando um Form organizado
<input  A tag input e a principal, a partir dela fazemos as caixas do formulario, nela posso ter
input text, number, radio, password, submit, entre outros ... (input = entrada)
}+ATRIBUTOS
<radio     Para selção de uma opção dentre varios itens(deve ter name igual)  Sexo  M[x]  F[ ]
<chechbox  Para seleção de varios itens dentre varios intens                  Robie  [x][x][x]
<textarea  Para que o usuario possa enviar grande mensagem ao formulario (method post)
<selec     Paraq o usuario selecione 1 item dentre uma lista muito grande    Estado(BA)(SP)(MG)(AM)
<selec>
   <option> BAHIA <option>   (Cria opções para serem selecionadas no <selec>)
</selec>                         [<form action="cadastro.php" method="get" autocomplete="off">]
<submit    Para enviar os dados
<reset     Para limpar todas as areas preenchidas.
<file      Para o envio de fotos/arquivos (para envio de aruivos usa-se o method post)
<range     Para definir nivel de algo 0 à 10
<select>   Define uma lista selecionável, também conhecida como drop-down;
<option>   Define uma lista de opções dentro de um drop-down;
<optgroup> Define um grupo de opções EX: agrupe varios options de uma regiao do brasil;
<tel <email>
<output    Serve para exibir um valor/calculo dentro de um formulario (ex: ex025 - form0)
<fieldset> Para agrupar determiando formulario em um capo unico. <legend - Adiciona uma legenda/titulo
à esse grupo criado (com fieldset posso agrupar (dados pessoas, dados financeiros criar categorias))

}Posso tambem adicionar uma caixa de texto com opções de preenchimento veja o EX:
<label for="iprof">PROFISSÃO</label>
                        <input type="text" name="prof" id="iprof" list="listprof">
                        <datalist id="listprof">
                            <option value="prof">Professor</option>
                            <option value="prog">Programador</option>
----------------

[+ ATRIUTOS - de validação, Alguns abrigatorios]

' required   (A exigir que uma caixa seja preenchida)
' minlenght  (Para exigir um tamanho min ou max do prenchimento)  EX:  minlength="5"
' size       (Redimenciona quantas letras a caixa exibira)        EX: size="10" 
' placeholder(Usa-se pra mostrar oq deve ser escrito na caixa)    EX: placeholder="Seu Nome"
' min        (Usa-se mim pra caixa numerica, valor min ou max)    EX: nim="0"  max="10"
' step       (Passo numerico 0.5 - 1.0 - 1.5 - 2.0)               EX: nota step="0.5"  "0.1"
' value      (Predefine um valor/nome inicial a caixa)            EX: value="5"  value="2020-10-12"
' checked    (Para marcar altumaticamente um item)                EX: name="isex" id="masc" checked>
' pattern    (Valida se determinado padrão está correto ^$)       EX: pattern="^[0-9]{2}[0-9]{5}-[0-9]{4}$">
o parttern sempre começa com ^ e termina com $, dentro defino como deve ser o padrão
' autocomplet(Usa-se para autocompletar as caixa, coloco o atrubuto no <form e <input)
' autocofus  (Usa-se para focar em uma caixa de formulario)     
especificando oq ele deverá completar EX: [autocomplete="username">] [autocomplete="new-password"]
[autocomplete="current-password">] current para a senha atual

]]REGEX - EXPRESSÃO REGULARES]] ou Regex, são padrões utilizados para identificar determinadas
combinações ou cadeias de caracteres em uma string.Seve para buscas, validações etc. Num formulário 
pode validar se um determinado texto está preenchido de form correta EX: (73) 99950-5050, validar
se um numero de telefone foi preenchido com todos os numeros.
+INFO(https://www.youtube.com/watch?v=d2uqo6PhdM4)

<label for="iusu">NOME: </label>
        <input type="text" name="uso" id="iusu" required minlength="6" maxlength="15">

---------------
AS tags apresentadas acima sempre terão [name e ID] o name servirá para o tratamento dos dados em PHP
o ID servirá para fazer a relação com LABEL e tambem com JavaScript.

((Ciaxa  q - É a caixa da solicitação query))

Na tag input temos o valor id e name, o atributo name serv para tratarmos os dados do formulário
usando uma linguagem de programção, normalmente PHP, usando a linguagem de programção podemos
recuperar os dados enviados pelo usuario, usando o atributo [action="processa.php"] action, para
receber os dados e assim podermos trata-los.
---------------

}METODOS - ENVIO DE FORMULÁRIOS (Atributo : Method:)

    Normalmente no HTML temos dois metodos basicos de envios de formulários, o 1º e padrão é o metodo
[GET: O método GET utiliza a própria URI (normalmente chamada de URL) para enviar dados ao servidor,
quando enviamos um formulário pelo método GET, o navegador pega as informações do formulário e coloca
junto com a URI (URL) de onde o formulário vai ser enviado e envia, separando o endereço da URI dos 
dados do formulário por um “?” ] Dados enviados por GET não podem exceder o tamanho de 3.000 bytes
} 3 MIL bytes seria equivalente a 3 mil letras.
}Não posso usar o GET para o envio de DADOS sensiveis: [Senhas, Numeros de documetnos, dados de cartão]

[HEAD: O método HEAD solicita uma resposta idêntica ao método GET, mas sem conter o corpo da resposta.]

[POST: O método POST é utilizado para submeter uma entidade a um recurso específico, frequentemente
causando uma mudança no estado do recurso ou efeitos colaterais no servidor. Envia dados ao servidor]
}Uso o metodo PSOT para dados sensíveis, querendo que eles n apareceçam na URL: FOTOS, SENHAS, CARTÕES,
entre outros, e todos esses envia-se de forma criptografada usando (HTTPS, seguro e criptografado)
Uso o posto também casa o arquivo exceda 3mil bytes onde o get nao servirá.

[PUT: Este substitui todas as atuais representações do recurso de destino pela carga de dados da requisição.]

[DELETE: O método DELETE remove um recurso específico]
__________________________________________________________________________


[CARCTERES ESPECIAIS - entities]-------

    Alguns caractes nõa podem ser exibidos pois fazem parttes de tags, pra isso existem as entities
<	less than	    &lt;	&#60;	
>	greater than	&gt;	&#62;	
&	ampersand	    &amp;	&#38;
__________________________________________________________________________


}} [CSS - INLINE] (AS FOLHAS DE ESTILHO EM CASCATA - CASCADING SHEETS)

    As CSS permite uqe vocÊ dê estilo Às paginas do seu site,
ATUALMENTE NÃO SE USA MUITTO CSS INLINE, COM ATRIBUTOS NA MESMA LINHA DA TAG, É DADA PREFERENCIA
EM COLOCAR AS FOLHAS DE ESTILO NA TAG STYLE (ccs - local/interno) OU NUM ARQUIVO EXTERNO EX:
    <body style="backgound-color: green>

Os estilos internos/locais são usados quando tenho pequenas modificações no estilo e eles se
limitam a apenas uma página, o estilo é aplicado com seletores e se aplica a todas a pagina
onde o este está escrito.
    <style>  < uma tag
        body {
            background-color: blue;   < uma declaração e valor
        }
    
    Vendos isso até agora a melhor forma de adicionar CSS ao site é usando a forma _external
criando um arquivo.css fazendo todos estilo nele e o aplicando via link nas paginas que queira
personalizar, as alterações feita nesse arquivo conseguirá modificar todas as paginas de uma 
vez fazendo comq economizemos tempo. Nas personalizações pontuais posso usar id e class
limitando a personalização a apenas 1 item.
    Para iniciar uma CSS externa uso a regra @charset "UTF-8" no inicio da folha, e então 
preencho cons parametros de estilo (tudo que começa com @ são regras - @font-face)
    Também posso adicionar varios links de css na mesma paginas, da mesma forma que uso um
estilo pra varias páginas. (Num mesmo arquivo posso usar CSS  interno, externo e inline)
    HIERARQUIA DE POSSO DAS FOLHAS
    De forma geral o CSS externo personalizará todas a folhas, sobreposta pelo CSS interno que
tambem e sobreposto pelo CSS inline. No fim o Inline tem mais poder
__________________________________________________________________________


}} [REPRESENTAÇÃO DE CORES - CSS]

PARA REPRESENTAR AS CORES USAMOS O PADRÃO RGB,COD HEXADECIAL OU HSL, (RED, GREEN, BLUE)

10  }DECIAML = 0 1 2 3 4 5 6 7 8 9
16  }HEXADECIMAL = 0 1 2 3 4 5 6 7 8 9 A B C D E F
     0 é o numero menos significativo e o F é o mais significagtivo
     As corres são formadas pelos padrão RGB (red, green, blue) com isso posso variar cores
     EX: [#0000ff (cor azul) [#00ff00] (cor verde)  [#ff0000] (cor vermelha) tons fortes

    }PARAMETRO RGB NUMERICO rgb(0, 0, 255) força de red green e maxima de blue

[ARMONIA DE CORES]

CIRCULO CROMATICO SERVE PARA CONSEGUIRMOS ARMONIZAR AS CORES
    
    CORES PRIARIAS    (AMARELO, VERMELHO, AZUL)
    CORES SECUNDARIAS (LARANJA, VIOLETA, VERDE)
    CORRES TERCIARIAS  - São as misturas de todas as outras cores primarias e sec.
    As terciarias são nomeadas com primeiro com nome da cor primaria seguida da cor segundaria
    EX: (amarelo-esverdeado, amarelo-alaranjado, vermelho-alaranjado) tons pasteis

DIVIDO UMA PALETA DE CORES TAMBÉM EM CORES FRIAS E CORES QUENTES, DEVEMOS CONSIDERAR ESSE FATOR,
AO ESCOLHER UMA PALETA PARA UM DETERMINADO SITE E CONTEUDO
    + A cor da logo do produto/site pode ajudar a formar a paleta de cores

    [CORES COMPLEMENTARES] São as cores que mais contrastam entre si, é encontrada escolhendo, 
inicialmente uma cor depois se escolhe a cor oposta a ela, assim criando um otimo contraste
    [CORES ANALOGAS]       São as corres imediatamente ao lado da cor escolhida, ai eu tenho
    uma similaridade entre elas, não haverá  constrate mas haverá armonia

PALETA DE CORES (#07338C - #4465A6 - #BFAF5E - #F27B50 - #F25757)

    [GRADIENTE EM  CSS]
* { /* Configurações globais das CSS*/
            height: 100%;
        }
    background-image: linear-gradient(30deg, blue, white, gree 20%);
__________________________________________________________________________


}} [TIPOGRAFIA]

    A TIPOGRAFIA surgiu para melhorar a legibilidade das letras, a TIPOGRAFI é o estudo dos tipos,
estudo de como denhar as letras seja em papael ou eletronicos. (o designer grafico foca em unir
três coisas boa imagens, boas corer e boas letrar, uma triade armonica que traza sentimos a quem 
vê o conteudo exposto). Sabendo disso depedendo de que conteudo vocÊ queira expor, uma fonte
idela deve ser escolhida para que haja sentido com o conteudo exposto.

FAMILIA DE FONTES (SAFE COMBINATION - COMBINAÇÃO SEGURA)
    Um parametro que une varias fontes para que ao menos uma seja identificada pelos navegador 
    EX: body {font-family: 'Courier New', Courier, monospace;}

-TAMANHO DE FONTES RECOMENDAÇÕES W3C
    (MEDIDAS ABSOLUTAS)
    TEMOS - cm centimetros / mm milimetro / in polegada / px pixel / pt ponto / pc paica

    (MEDIDAS RELATIVAS)
    TEMOS - [em]medida relativa ao tamanho atual da font / [ex] relativo a  altura x de uma fonte
    [rem] taamnhp relativo a fonte configurada no body / [vw] largura da viewPort em %
    [wh] altura da viewPort em  % /  [%] tamanho representado em porcentagem
    - A medida pt / pontos é usado em editor de textos para impressão
    - 16px é igual a 1em, o tamanho padrão da fonte na web
    - o [rem] terá como base o tamanho configurado no padrao do body

    }A recomendação da W3C é que usemos [px e em]
--------------
- PESO, ESTILO E SHORTHAND FONT

font-weight : lighter , normal , bold, bolder
font-weigth : (tamanho numerico, 100,200,300,400 ...900)
font-style  : normal, italic
text-decoration : underline, overline ...

-shorthand (condensar todas as configurações em uma linha, siga a ordem)
[font-style, font-weigth, font-size, font-family]
font: normal lighter 3em 'work sams, sans-serif'

- para que a fonte se adapte às configurações devemos ter uma fonte que aceite essas configs
nem todas as fontes tem essas possibilidades

- Você pode @importar fontes do Google fontes, não use muitas variações de fontes em seu site

    }USANDO FONTES EXTENAS 
Para usar fontes extenas devemos criar uma regra @font-face, então inserir a URL da fonte para
que ela seja lida pelo navegador. nessa regra tmb devemos incluir o (format) da fonte veja:
tipso de format()
- open type(otf)   - truetype(ttf)   - embedded-opentype()   veja EX:

  @font-face {
            font-family: 'story';
            src: url('fonts/HandwrittenStory.otf');
            font-weight: normal;
            font-style: normal;
        }

com tudo que vimos sobre fontes, você pode tmb pegar fontes deum site ou extrai-las de imagens
__________________________________________________________________________


}} [#ID e .CLASS ] video yt = diferenças entre id e class 

Quando precisamos estilizar ou inserir scripts em determinados elementos na página da nossa
aplicação, precisamos nomeá-los através de class ou id.

-Não posso usar usar o mesmo id em carios elementos, o ID identifica apenas 1 item
-Para criar um grupos de itens onde posso pesonalizar todos uso o .class 
- Sempre importante nomearmos os classes e IDs pela funcionalidadeq ele execultara
e não com o nome da personalização/forma que ele adiquira   EX:

<h1 [id="titulo"]>Seletores em HTML</h1>
    <main>
        <h2 [class="subtitulo"]>Testando Seletores</h2>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>

        <h2 [class="subtitulo]">Noticias do Brasil</h2>
        <p>Lorem sit amet dolor sit amet }<span class="sub"> CONCECTETUR </span> adipisicing.

- PARA aumentar o alcance de um class, envolvo partes do texto com span e class EX acima
- TAMBEM posso colocar duas class na mesma tag veja o exemplo EX:
<h2 [class="subtitulo marcado"]>Testando Seletores</h2>

O codigo acima receba as configurações do .subtitulo e .marcado ( quando uso dois .class na
mesma tag, ambos serão confugrados juntos. Mas se uso .class e um #id, esse id sobrepora
a configuração do class.)
-----------------------

} :Pseudo-classes em CSS 
Uma :pseudo-classe CSS é uma palavra-chave adicionada a seletores que especifica um estado
especial do elemento selecionado. Por exemplo, [:hover] pode ser usado para alterar a cor
de um botão quando o usuário passar o cursor sobre ele.

Usando divs e :hover posso alteraar a função das divs dando efeitos simples a elas, tambem nas CSS
posso lecionar filhos das divs com o seguinte comando[ div > p   /   div > h1], selecionado assim
posso personalizar itens que estão dentro de tags veja os exemplo EX:

 div:hover {
            color: red;
        }
        div > p {
            display: none;
            background-color: grey;
        }
        div:hover > p {
            display: block;
+PSEUDO CLASSES
a:visited  (para modificar os links que foram visitados)
a:active   (para modificar a cor do link quando clicado)

]PSEUDO CLASSES SÃO PALAVRAS QUE DEFINEM ESTADOS DE ELEMENTOS EM HTML, TEMOS TMB >>
]PSEUDO ELEMENTOS:: ELES PODEM AGIR, NAS CLASSES NOS ELEMENTOS NOS IDs, (diretamente
no conteudo periferico do elemento) EX:: pseudoElementos uso dois pontos
a::after {
            content: '  &#x1F517';
__________________________________________________________________________


} [BOX MODEL   -  Modelo de caixa]

No CSS, o termo "modelo de caixa" é usado quando se fala em design e layout.

O modelo de caixa CSS é essencialmente uma caixa que envolve cada elemento HTML. Consiste em:
margens, bordas, preenchimento e o conteúdo real. A imagem abaixo ilustra o modelo da caixa.

--Explicação das diferentes partes:

]Conteúdo - O conteúdo da caixa, onde texto e imagens aparecem
]Preenchimento [padding] - Limpa uma área em torno do conteúdo. O preenchimento é transparente
]Fronteira [border] - Uma fronteira que gira em torno do estofamento e conteúdo
]Margem [margin - Limpa uma área fora da fronteira. A margem é transparente, veja o EX:

}colapse-Margin = Quando houver dois elementos, ambos com margin elas se colapsarão, mas será
predominante a margem maior no fim

div {
  width: 300px; [conteudo] 
  padding: 50px; [padding] - O espaçamento ao redor do conteudo
  border: 15px solid green; [border] - A borda  que envolve o espaçamento
  margin: 20px; [margin] - O espaçamento invisivel que fora da borda

[(outline) - é uma linha de contorno do 'border']

!! ENTENDA - O body é uma  caixa o main e outra caixa a div e a section são caixas,
uma dentro da  outra e podem ser configuradas livremente.

- Podemos colocar um elemento dentro do outro, 'caixas dentro de caixas' isso e´chamado de
aninhamento, nas caixas que envolvem os conteudos tenho medidas de (height= altura e 
width = largura)

} Tipos de ciaxas [box-level / inline-level]
[box-level] O box level sempre oculpa a largura total da tela, de uma ponta a outra
e sempre se iniciara em outra linha, EX: [<div] oculpa toda pagina, veja mais ex de box level
(<h1,h2.. p, main, header, nav, article, aside, footer, form, video)

[inline-block] A caixa inline-block é exibida na mesma linha que o conteúdo sem quebra
EX: [<span] oculpa uma pequna parte, só para mostrar o conteudo, veja mais ex: de inline-block
(<span, a, code, small, strong, em, sup, sub, label, button, input, select)

]] Configurações natativas nas tags são feitas pelo [USER AGENT] seu navegador.
No navegador posso usar o devTools para configurar.
]Para  centralizar caixas uso (margin: auto;)
]Num elemento inline-blcok n posso definir altura e largura
([box-sizing: border-box;] que indica que o tamanho agora levará em conta até a borda -- ou seja,
 o width será a soma do conteúdo com a borda e o padding) Traz a border pra dentro do padding.

 display: block (conteudo em linhas diferente)
 display: inline(conteudo na mesma linha)
 display: inline-block (conteudo na mesma linha, respeitando o conteudo da caixa)
-------------------

[DIPLAY - FLEX]
Para que serve o Flexbox?
    O Flexbox é um conceito do CSS3 que visa organizar os elementos de uma página HTML dentro de seus
containers de forma dinâmica. Ou seja, independente das suas dimensões eles sempre manterão um 
layout flexível dentro do seu elemento pai, reorganizando-se e acordo com a necessidade.
    Quando criamos uma div por ser display block ela fica orgadinazada uma abaixo da outra,
quando aplicamos o display flex, mesmo sendo uma display box level ela ficara uma ao lado da outra,
de acordo com tamanho do display. [aqui alguns atritubutos do flexbox]
}
display: flex;   = tora os itens flexiveis
[flex-direction;  = direciona a ordem dos itens / row, column (linha e coluna)
[flex-wrap: wrap; = define se os itens flexíveis são forçados a ficar na mesma (envoltura flexivel)
linha ou se pode serquebrados em varias linhas
[flex-wrap: nowrap;
[flex-wrap: wrap-reverse; = Organiza os itens na forma reversa
[justify-content: center;
[align-items: center;
[justify-content: space-around;     (EXEMPLO DE CODIGO)
[Flex-basis: definindo o tamanho inicial do elemento Nessa propriedade, definimos a largura ou altura
(dependendo da direção do eixo) inicial do item.
[Flex-shrink: diminuindo o tamanho dos elementos do container Nessa outra propriedade, definimos
a proporção que queremos diminuir o item. Parecido com o flex-grow, temos o valor padrão de 0 e
apenas números positivos são aceitos.

display: flex;
        justify-content: center;  /* altera o alinhamento na orizontal*/
        align-items: center;    /* altera o alinhamento vertical */
        flex-wrap: wrap;  /* faz com q haja uma quebra de linha  mandando os que não cabe para baixo*/
__________________________________________________________________________


} [GROUPING TAGS]  Agrupamento de tags

    No HTML anterior não havia tanta semantica e o agrupamento de tags era feito apenas com <div
Hoje com a semantica mais há varias tags que podem agrupar outras, semanticamente veja ! EX:

<header - No header e o cabeçalho nele agrupo o titulo do site <H1 e o <NAV a area de menu
<main   - O main correponde ao corpo do site, posso ter tags como <section = id assuntos
dentro dessa section posso ter <articles e dentro do artigo posso ter um aside, sobre um assunto
periferico ao artigo
<footer - No footer coloco os detalhes do rodapé do site

----CSS position (RELATIVE - ABSOLUTE)
Em position: relative , o elemento é posicionado em relação a si mesmo. Por outro lado, um elemento
com position: absolute tem sua posição relacionada a de seu elemento pai. Um elemento com position:
absolute é removido do fluxo normal do documento.
__________________________________________________________________________


} [CRIANDO UM PROJETO] Passos para criação

Primeiro defina a modelo que fará e escolha a paleta de cores
Depois crie e organize os arquivos dos projetos
Depois estruture e forkmate todos aquivo HTML, depois aplique os estilos
__________________________________________________________________________

} [ELEMENTOS FLUTUANTES ]------

A propriedade flutua do CSS determina que um elemento deve ser retirado do seu fluxo normal
e colocadoao longo do lado direito ou esquerdo do seu containêr, onde textos e elementos em
linha irão se posicionar ao seu redor. (As caixas deixarão seu fluxo normal e responderao
aos seguintes comandos EX:)

]float right: Os cotenudos são jogados à direia da tela
]float left: Os conteudo ja a direita agora ficarã ona orizontal um à esquerda do outro

.conteudo1 {
            background-color: rgb(173, 217, 230);
            width: 350px; height: 150px;
            border-radius: 10px;
            margin: 5px;
            float: left;

        .clear {
            clear: both;   [Com clear posso limpar os espaços ao lado dos itens, fazendo com que
        }                   o texto ou outros itens passe para a proxima linha abaixo]
__________________________________________________________________________


} [IMAGEM DE FUNDO ]

    Coloca-se imagem ao fundo com um unico proposito visual esse é o parametro
background-image: url('imagens/pattern003.png');
background-image: linear-gradient(to bottom, #9050ff, orange);  (fundo gradient)

}Parametros Imagens e ShortHand

body {
            height: 97vh;
            background-color: black;
            background-image: url('imagens/wallpaper002.jpg');
            background-position: center center;
            background-repeat: no-repeat;
            background-size: cover;
            background-attachment: fixed;   ( scroll, fundo rola com a imagem, fixed pra fixo)

/* SHORTHAND - BACKGROUND */
        Nessa ordem = color > image > position > repeat > atachment    
         > size (size se coloca separadament) */
__________________________________________________________________________


} [RELATIVE - ABSOLUTE]

Em position: relative , o elemento é posicionado em relação a si mesmo. Por outro lado, um elemento
com position: absolute tem sua posição relacionada a de seu elemento pai. Um elemento com position:
absolute é removido do fluxo normal do documento. 
(Quando atribuo o paramento absolute a um elemento posso configurar dois parametro nele) EX:

 #conteudo { /*article*/             [Este conteudo sendo child de outro posso move-lo sobre o pai]
            position: absolute;
            height: 200px;
            width: 300px;
            background-color: yellow;
          - left: 200px; (posicionamento da esqueda para direita)
          - top: 200px;  (posicionamento do top ao bottom)

Usando o  [transform: translate]] posso movimentar com mais liberdade o iten child sobre o pai EX:
 transform: translate(-50px, -50px);     //  transform: translate(30px, 30px);

O movimento ocorrerá com o mesmo padrao do left e top, posso usar valores positivos e negativos
Com isso terei um objeto posicionado num lugar fixo.     [ex022 - fundo006]
__________________________________________________________________________


} [MEDIA QUERY] = Media type + Media features

    Uma media query consiste de um media type e pelo menos uma expressão que limita o escopo das 
folhas de estilo usando media features, tal como largura, altura e cor. Media queries, adicionadas
no CSS3, deixam a apresentação do conteúdo adaptado a uma gama especifica de dispositivos não 
precisando mudar o conteúdo em si. (Apapta o conteudo para telas de tamanhos diferentes)

    }Sintaxe
Media queries consistem de um media type e podem, a partir de uma especificação CSS3, contendo uma
ou mais expressões, expressa em media features, que determinam ou verdadeiro ou falso. Os resultados
da query são verdadeiros se o media type especificado na media query corresponde ao tipo dodocumento
exibido no dispositivo e todas as expressões na media query são verdadeiras.
]Com as MEDIAS QUERIES posso adptar o conteudo a diferentes telas adaptando ou reposicionando intes

MEDIA TYPES
}Posso criar estilos para diferentes dipositivos (telas, tudo, imprimir)
<link rel="stylesheet" href="style/tela.css" [media="screen"]>  [media="all"] [media="print"] EX:

<title>Media Queries</title>
    <link rel="stylesheet" href="style/tela.css" media="screen">
    <link rel="stylesheet" href="style/impressora.css" media="print">
---------------------

}MEDIA FESTURES (caracterstica/tamanho de midias)

Quando uso medias posso usar media type e complementalas com media features, informando a forma
que o conteudo deve se comportar dependendo da screen que eles está sendo visualisado

Media types são escritas assim = [media="screen"  media="all" media="print"]
Media features são e scritas entre parenteses (orientation:portrait) ex:

[uso media=all para iformar que usarei as CSS pra todos tipo de media]
    <link rel="stylesheet" href="style/all.css" media="all"> 
    <link rel="stylesheet" href="style/retrato.css" media="screen and (orientation:portrait)">
    <link rel="stylesheet" href="style/paisagem.css" media="screen and (orientation:landscape)">

}Caso queira usar a media QUERY e FEATURES numa escala meno dentro de uma mesma folha de estilo
deve-se usar a regra [@media] e nela declarar a query SCREEN e a feature EX:

  @media screen and (orientation:portrait)
  @media screen and (orientation:landscape) {
    body {
        background: #233eff url('../images/cev-landscape.jpg') left bottom no-repeat;
        background-size: contain;
    }
}PARA UM PROJETO GRANDE COMENDA-SE USAR AS MEDIAS QUERIES SEPARADAS
__________________________________________________________________________


} [MOBILE FIRST] Dispositivos moveis em primeiro lugar !

    Mobile first é um projeto que faz a criação de projetos web e sites primeiro em dispositivos
móveis, para depois fazer adaptações para o desktop e outras plataformas, ao contrário do que
ainda acontece na maioria das vezes.
Focado na arquitetura e desenvolvimento de sites para a web, ele cumpre com maestria o que propõe
em sua tradução literal: móvel primeiro.

} VANTAGENS DE DESENVOLVER EM MOBILE FIRST>
    Os mecanismos de buscas valorizam sites que são desenvolvidos em MOBILE FIST, logo em buscas
esse serãos os primeiros da lista
    Melhoria na experiencias do usuário, quando uso mobile fist devo focar em site leve e rapido,
e principalmente adaptavel, tento esses parametros meus site será valorizado ainda mais.

----------

} Typical Device breakpoints (pontos de interrupção CSS para design responsivo)

    Os pontos de interrupção do CSS são os pontos adicionados no código, o conteúdo do site responde
a esses pontos dependendo do tamanho da tela do dispositivo. Isso ajuda na exibição de um layout
ideal para o usuário final. Os pontos de interrupção do CSS são usados juntamente com a consulta de
mídia devido à qual também é conhecido como quebra-pontos de consulta de mídia CSS.

Pequenas Telas: [ 600px]
Celular: [600px - 768px]
Tablet:  [768px - 992px]
Desktop: [992px - 1020px]
Grandes Telas: [acima de 1200px]

@media only screen and (max-width: 600px) {...}

Usando os pontos de interrupção CSS mencionados acima, você pode criar um site responsivo 
simplificado e gerenciável.

} Quando faço um projeto baseado em MOBILE FIRST crio primeiro a versão mobile, logo vou configurar
as breakpoints apenas para tablet e desktops, adaptando as CSSs para dispositivos maiores
__________________________________________________________________________


} POSICIONAMENTO [ESTATICO - RELATIVE - ABSOLUTE - FIXED]

]fixed; 
irá fixar a posição do elemento na coordenada que você definir. A medida que a página é rolada,
o elemento continua fixo na posição que você definiu e o conteúdo da página rola normalmente.

]static
O elemento é posicionado de acordo com o fluxo normal do documento(padrao das tags)

]relative
O position relative posiciona o elemento em relação a si mesmo. Ou seja, o ponto zero será
o canto superior esquerdo, e ele começará a contar a partir dali (reposiciono com top, left=)

]absolute
O Position Absolute é um tanto diferente do Relative. Enquanto o elemento com Position Relative
utiliza seu próprio canto para referenciar sua posição, o elemento com Position Absolute se 
utiliza do ponto superior esquerdo de outros elementos. Estes elementos são os parentes dele do
elemento com position absolute. Mais especificamente o pai.

No caso, se o DIV pai não tivesse position definido, o div filho iria se referenciar pelo BODY mesmo
Se caso o div pai não tivesse position definido, e se ele também fosse envolvido por outro div com 
position, o div filho iria se referenciar por este terceiro div.
Logo, o div com position absolute referencia sua posição pelo div mais próximo que o envolve e que 
também tenha um position definido. Complicado, não é?
(Um elemnto pai precisa do posicionamento RELATIVE para que o filho em ABSOLUTE possa ser posicionado
dentro dele.)

]sticky
O elemento é posicionado de acordo com o fluxo normal do documento e, em seguida, deslocado em relação
ao ancestral de rolagem mais próximo, Este valor sempre cria um novo contexto de empilhamento. 
Observe q um elemento pegajoso "gruda" em seu ancestral mais próximo q tenha um "mecanismo de rolagem"
(usado para fixar elemento depois da rolagem, como menus)


]STATIC - Posicionamento padrão dos ELEMENTOS
]RELATIVE - Quando usamos esse paramentro podemos usar propriedades de deslocamento para movimentar
(top, left  - valores positivos e negativos  top:-20px)

]z-index - Uso para posicionar as caixas uma acima da outra para decidadir qual deve ficar À frente
(o objeto/caixa definido com maior z-index terá o posicionamento acima do definido com menor) EX:
div {
    x-index: 1;   aparecerá acima de    dix com z-index: 0;
}

}} Pseudo classe para OCULTAR SCROLL} #ajuda::-webkit-scrollbar {
            display: none;
        }
} overflow: none - Para esconder conteudo que trabodar as bordas da caixa
} overflow: scroll - Para rolar conteudo que transboda as boda da caixa
__________________________________________________________________________


} [PESONALIZANDO LINKS] CSS

O seletor :pseudo-classe para links
São quatro as pseudo classes para links:

a:link........define o estilo do link no estado inicial;
a:visited...define o estilo do link visitado;
a:hover.....define o estilo do link quando passa-se o mouse sobre ele;
a:active....define o estilo do link ativo (o que foi "clicado").
__________________________________________________________________________

} [SELETORES - CSS ] Personalizados

    USAMOS OS SELETEROES PARA PEGAR AS TAGS DA HTML PARA A FORMATAÇÃO -  div {}
Padrao de uso dos seletores [ sletor p \ chaves {} \ propriedade color: \ valor blue; ]
Esse padrão acima é chamado de DECLARAÇÃO -  veja alguns exemplos de seletores.

* {}      seletor universal - nele as alteraçõs são aplicadas em toda a página

h1, h2, h3 {}  seletor de texto - esse seleciona os elemntos pelos tipo, usando virgula
para separalos.

.classe {} seletor de classe - nesse usamos o ponto para referir-se a uma classe criada.

#id {} seletor de ir - nesse a # e usada para indicar q estão selecionado um id

div > h2 {} seletor de filho - esse seleciona um elemento direto que é filho de outro
usamos > para indicar que o filho será formatado.

p a {} seletor descendente - esse a formatação será aplicada a todos os links dentro
do paragrafo mesmo n sendo filho direto

h1 + p {} seletor irmao adjacente - esse seleciona o primeiro elemento depois da tag indicada
sempre e somente o primeiro seu irmao.

h1 ~ p {} selector irmão geral - esse seleicona e formata todos os irmãos após uma tag  EX:
EX: <article>
        <h1> texto 
        <p loren loren loren
        <p loren loren loren        (ambos irmãos de h1 serao formatados )
----------------------------
[Herança e Especificidade]

}} A ultima formatação especificada no seletetor sempre será a predominante!
}} Quando mais for especifico o seletor mais sua regra será considerada EX:
* { color: red;}   h1 {color: red;}  o h1 sobreporá a regra geral da CSS
h1.cor-padrao {color: purple}  este ultimo caso ainda mais especifico sobreporá
as duas formatações anteriores.
h1#cor-padrao2 {color: green}  neste caso o ID é mais forte e sobreporá a formatação da class

Elemento, pseudo elemento: d = 1 — (0, 0, 0, 1)
Classe, pseudo classe, atributo: c = 1 — (0, 0, 1, 0)
Id: b = 1 — (0, 1, 0, 0)
Estilo inline: a = 1 — (1, 0, 0, 0)
O id é mais específico que uma classe que, por sua vez, é mais específica que um elemento.
 __________________________________________________________________________


}} [GRID - LAYOUTS]

Fixo, Liquido
O layout fixo ele preenche o espaço pre-determinado de forma fixa sem adaptações
O layout liquido se adapta a tela de acordo com seu tamanho, tablets ou pcs

Dimensões fixas ou flexíveis
Você pode criar grids com dimensões fixas – por exemplo: definindo dimensões em pixels.
Ou criar grids com dimensões flexíveis definindo-as com uso de porcentagem ou da nova unidade
CSS fr criada para esse propósito.

https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#:~:text=As%20CSS%20grid%20layout%20preveem%20as%20seguintes%20funcionalidades%3A,nova%20unidade%20CSS%20fr%20criada%20para%20esse%20prop%C3%B3sito. [+info]

EXEMPLIFICANDO :: tags

No container pai posso difinir as seguinte tags para organizar o GRID
] display: grid;
] grid-template-columns: 50px auto 10%; (estilipulo numero de colunas e defino seu tamanho podendo
usa varias unidades de media.)
] grid-tamplete-rows: 70% 70%; (defino a dimensão das linhas tmb uso varias unidade de medidas)

] gap: 5px; (uso para definir um espaçamento entre o grid, como um margin)
apenas o gap: é usado, pois define espaçaentos iguais 
] grid-row-gap: 10px; (posso definir um espaçamento individual entre as linhas)
] grid-columns-gap: 20px (posso definir espaçamento individual entre as colunas)
-------------

[TAMPLETE AREAS] Para dividir os site em algumas areas especficas

Para definir o layout-base, usa-se a propriedade grid-template-area. Os nomes atribuídos à grid-area
de cada contêiner podem ser dispostos de acordo com as colunas e linhas definidas. Quando se 
adiciona cada row das template areas a uma nova linha, o CSS se torna um padrão visual de grid layout.

.container {
    background-color: lightblue;
    border: 1px solid red;
    padding: 15px;
    display: grid;
    gap: 5px; 
    grid-template-areas: 
    'header header header'
    'sidebar content content'
    'footer footer footer';
}

#header {
    grid-area: header;
}

#sidebar {
    grid-area: sidebar;
}

#footer {
    grid-area: footer;
}
--------
[Alinhamento GRID Layout]

justify-content: center;  (alinhamento horizontal das grids - [star - center- end])
align-itens: start; (alinhamento vertical das grids - [start - center - end])
]O alinhamento sempte respeitará a area livre disponivel
--------
[ALINHAMENTO INDIVIDUAL - GRID LAYOUT]

Nessa regra consido indicar quando uma coluna/linha(column/row) começa e terminado na pagina EX:

#container > .item-1 {            (Considerando a formatação do container pai)
    grid-column-start: 1;         (redimensionando colunas)
    grid-column-end: 4;
}

]A primeira coluna ja esta ocupada pela linha 1, posicionarei a segunda linha EX: (img-row-column)

#container > .item-2 {
    grid-row-start: 2;
    grid-row-end: 4;
}

] Para o posicionamento de um item INDIVIDUAL na [horizonatal] uso o senguinte paramentro.  EX:

#container > .item-3 {          (justify self posicionamento de si mesmo)
    justify-self: end;          (star, center, end)
}

] Para o posicionmento de im intem INDIVIDUAL na [vertical] uso o seguinte EX:

#container > .item-4 {          (o aling-self movimentara o item na VERTICAL)
    align-self: center;
}
__________________________________________________________________________


} [NORMALIZE - css ]

Normalize: O que é?
A ideia de existir o Normalize CSS é a mesma que do Reset CSS, mas ele possui algumas diferenças
importantes na hora de usar. (E suma essa folha CSS normalizar as TAGS para todos os BROWSERS)

As diferenças entre Reset CSS e Normalize:

O Reset CSS limpa TODOS os padrões dos navegadores. É uma forma muito agressiva de "limpeza"
enquanto o Normalize ainda mantém padrões que são úteis.
Normalize CSS corrige alguns bugs que existem nas estilizações padrões dos navegadores.
Normalize é modular. O código todo é separado por seções específicas, então você pode procurar por
mudanças de forma mais direta.
O Normalize tem uma documentação detalhada sobre o uso e justificativas das mudanças feitas por ele.
Como usar?
Da mesma forma que o Reset CSS, o Normalize é uma folha de estilos que deve ser importado antes de
qualquer estilização no projeto. Ele deve ser o primeiro arquivo CSS a ser importado no projeto.
É importante "limpar" primeiro o projeto antes de começar a desenvolver.

Como implementar?
Em seu projeto html, dentro da tag head, utilize a tag link, para chamar o arquivo normalize.css:
]<link rel="stylesheet" href="normalize.css">
__________________________________________________________________________


}} [ANIMAÇOES - css]

Animações CSS tornam possível animar transições de um estilo CSS a outro. Animações se consistem
de dois componentes: um estilo descrevendo a animação e um set de keyframes que indicam o estado
final e inicial do estilo CSS da anima. como possíveis waypoints intermediários ao longo do caminho.
------
[Configurando a animação
Para criar uma sequência de animação CSS, você estiliza o elemento que deseja animar com
a propriedade animation ou suas sub-propriedades.

[animation-name 
Especifica nome da regra com parênts (at-rule) @keyframes at-rule descrevend os keyframes da animação]

[ animation-duration 
Configura o tempo que uma animação deveria levar para completar um ciclo.

[ animation-delay
Configura o delay entre o tempo em que o elemento é carregado e o inicio da sequência de animação.

[ animation-iteration-count 
Configura o numero de vezes que uma animação deveria se repetir; você pode especificar infinito
para repetir a animação indefinidamente. (infinite - para que se repita)

[ animation-direction 
Configura se a animação deve ou nao alternar a direção em cada execução durante a sequência ou voltar
ao ponto inicial e se repetir. (alternate - execulta o movimento e faz reverse na animaçao)

[ animation-play-state 
Permite voce pausar e resumir a sequência da animação.

[ animation-timing-function
Configura a sincronização da animação; que é, como a animação transita por keyframes, por
estabilizar curvas de aceleração.

[ animation-fill-mode
Configura que valores são aplicados pela animação antes e depois de se executar.

-} Lembrando que ao usar animaçoes devo indicar o WEBKIT para a cessibilidade em outros navegadores

@-webkit-keyframes anima-caixa {         [-webkit-keyframes / -moz-keyframes / -o-keyframes ...]
    from{ /*  DE - ESTADO INICIAL  */
        background-color: lightblue;
        border-radius: 3px;
        width: 300px;
        top: 0px;
        left: 0px;
    }
    to{  /*  PARA - ESTADO FINAL */
        background-color: lightcoral;
        border-radius: 80px;
        width: 400px;
        top: 50px;
        left: 50px;
    }
}

__________________________________________________________________________
 } [TRASICOES EM CSS]

CSS transitions provê uma forma de controlar a velocidade de uma animação quando há mudanças
de propriedades CSS. Ao invés de uma propriedade entrar em vigor imediatamente, você pode 
fazer com que as mudanças em uma propriedade ocorram durante um periodo de tempo.
-----
Constituent properties
This property is a shorthand for the following CSS properties:

transition-delay (tempo para iniciara transiçao)
transition-duration (duraçao da transiçao)


transition-property (nome da trasiçao EX: width)
[[transition-duration: 6s;
transition-duration: 120ms;
transition-duration: 1s, 15s;
transition-duration: 10s, 30s, 230ms;]]

transition-timing-function (tipo de animação)
[[transition-timing-function: ease;
transition-timing-function: ease-in;
transition-timing-function: ease-out;
transition-timing-function: ease-in-out;
transition-timing-function: linear;
transition-timing-function: step-start;
transition-timing-function: step-end;]]

ease-in: indica a transição lenta apenas no início;
ease-out: realiza a transição lenta apenas no final;
ease-in-out: realiza a transição com o início e final lentos;

]Exemplo simples
Esse exemplo executa uma transição de com duração de 4 segundos de delay entre o tempo que o usuário
passa o mouse sobre o elemento (evento mouseover), e o início do efeito da animação

 #caixa {
            width: 300px;
            height: 300px;
            background-color: #5656ca;
            border-radius: 10px;
        }#caixa:hover {
            background-color: #1f1664;
            border-radius: 90px;
            width: 500px;
            -webkit-transition: rotate 5s, width 3s, border-radius 5s, background 1s ease-in-out ;
            -moz-transition: rotate 5s, width 3s, border-radius 5s, background 1s ease-in-out;
            -o-transition: rotate 5s width 3s, border-radius 5s, background 1s ease-in-out;
            transition: rotate 5s width 3s, border-radius 5s, background 1s ease-in-out;

             /*POSSO DEFINIR DE FORMA SIPLIFICADA APENAS UM UM COMANDO ALL*/
           /* transition: all 5s ease-in-out; */
__________________________________________________________________________

