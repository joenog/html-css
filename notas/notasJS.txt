
{{[JAVAscript}]}

- Javascript é uma linguagem de auto nivel, isso pq ela se aproxima bastante da linguam humana
Linguem de alto/baixo nivel - está relacionado o quão facil esta linguagem é prum humano

Exite duas forma de inclusão de javascript na pagina - internamente e externamente
{Atente-se programas antigos podem conter inclusão de javascript diferente das atuais, essas
estando obsoletas podem problematizar os codigos}

- O javascript ao lado do cliete atua em páginas HTML

- O javascript n precisa ser compilado ele é interpretado pelo browser usando o NODE.js

- Um script adicionado dentro da tag HEADER será execultado primeiro por estar no topo da pag,
isso podo causar problemas jaque comando do script serão execultados antes mesmo da pagina ser
lida pelo browser, isso vai sejar conflitos na leitura e o script n será interpretado

{{NÃO SE ESQUEÇA, COMENTAR CODIGO É UMA PRÁTICA MUITO IMPORTANTE !}}
// comentario de uma linha
/*   */ comentario de várias linhas

window.alert       // este comando emite uma mensagem!
window.confirm                  // este comando faz uma pergunta de confirmação
window.prompt                  // este comando faz um pergunta de resposta!')
________________________________________________________________________

Variáveis:

Como Criar variáveis, Ex: var nome ou let nome

para uma variável receber um valor usamos:
{o nome dado as variáveis é chamado de identificadores}
 var nome1 = Gustavo       // desta forma criamos uma variável e ao mesmo tempo demos uma valor
    {isso é chamado de atribuição}
nome1 = Gustavo            //desta forma apenas demos um valor para a variável que ja foi criada

//Regras das variáveis:
Podem começar com: Letra, $ ou _
Não podem começar com números 
É possível usar letras ou números
É possível usar  acentos e símbolos 
Não pode conter espaços 
Não pode usar palavras que são comandos da linguagem js

//Dicas para nomes das variáveis: 
Maiúsculas e Minúsculas fazem a diferença!
Tente escolher nomes coerentes a função da variável. Ex: Variável que vai armazenar a idade,
coloca o nome dela de “idade”
Evite se tornar um “Programador Alfabeto” ou um “Programador Numérico”. Ex: Não usar os nomes das
variáveis como “a”, “b”, “c”, etc; ou “a1”, “a2”, “a3”, etc.

{todas aqui são variáveis do escopo global do js}
Tipos de Dados das Variáveis: (Tipos Primitivos, lembrando que existem muitas outras!)
Numbers;  Strings;  Boolean;

// Numbers: 1; -2; 4.5; 6.555 -> Basicamente números
// Strings: Maria, Google, Joao, pedreiro, (seu CPF) -> Basicamente cadeia de caracteres
// Boolean: True; False  -> armazena o estdo de algo

// string - armaneza numeros e cadeia de caracteres
let nome = 'Cadeia de caracteres';
{Para sctring em javascript eu posso usar 3 tipos de aspas (''  ""  ``)}
{No JavaScript não há diferença entre uma string criado com aspas simples ou duplas.}
{`` a crase usamo para interpolatar a string assim podendo adicionar calculos a string}
        
// number - armazena numeros reais e inteiros
let numeroInteiro = -7  15  
let numeroReal = 7.5  6.2 (float com pontos flutuantes)

// boolean - armazena estados - para testes condicionais (false - true)
let n1 = 2
 let n2 = 3
 let resp = n1 == n2;
  document.write(resp)
 / false /

 {Existe varios DATA TYPES in javascript - para descobri-los uso o (typeof n1)}
-------------

// alert - serve para abrir um dialog
// alert - normalmente e usado para debug - com alert posso expor o valor duma variável
alert(numeroReal)

| // null - representa a ausencia intencial de um valor, se preciso criar uma variavel e esta 
| inicialmente n tem valor atribuo o 'null' a ela para que seja criada valorizado
|
| // undefined - indica que a variável apesar de declarada de fato n possui nenhum valor. 
| podendo atribuir o vaor 'undefinide' ou omiti-lo.
--Nestas duas situações acima as variáveis podem ser trablhandas, podemos posteriormente
atribuir valores a elas.

// DOM - todos os elemtnos HTML contidos na paginas estão na arvore DOM
// e posso buscalor com  - document
document.write(nome)
// este elemento será inserido como um nó na arvore de alements do DOM

// console.log() esse comando e muito utilizado no processo de debuging
console.log(numeroInteiro)
// usamos o console em partes dum script longo para ver como vão evoluindo os testes
/* quando estamos trabalhando com logicas mais complexas podemos incluir o console.log em varias
partes para vermos a evolução */

// posso incluir tags HTML no javascript dentro de aspas EX: - document.write('A ' + a + '</br>')
________________________________________________________________________


[AULA 6]  {Manipulação de dados}
Transformando uma string em Number

var n1 = Number.parseInt (window.prompt ('digite aqui um numero!'))
var numero1 = Number.parseFloat (window.prompt ('digite aqui um numero!'))
var numero1 = Number(prompt('digite aqui um numero!’))

Mas qual é a diferença entre “Number.parseInt”, “Number.parseFloat” e Number?

// Number.parseInt: Numero Inteiro
// Number.parseFloat: Numero flutuante
// Number: Js vai decidir qual é

// number + number : adição
// string + string : concatenação
EX concatenação = 
let nome1 = Joao
document.write('Esse é o primeir ousuario' + nome1 + ' Estamos felizes por estares aqui')
{Caso queira fazer uma soma deve-se converter o valor do prompt para number, se este estiver
como string o sina lde + fará a concatenção dos valores e não a soma}

________________________________________________________________________

{---}Transformando um number em uma string

window.alert ('a soma dos numeros é:' + soma.toString())  // Jeito mais antigo
ou
window.alert ('a soma dos numeros é:' + String(soma))     // Jeito mais simples
________________________________________________________________________

{Formatando Strings:  // usando a crase dupla

var teste = 'java script’

// concatenação
‘eu estou aprendendo’ + teste 

// tamplete string (interpolação ``)
`eu estou aprendendo ${teste}` -> não esqueça de usar crase! concatenação simples com crases 
e var dentro de ${}  <<(placeholder)

// a interpolação facilita a organização e leitura do codigo

var a = 5;
var b = 10;
console.log(`Quinze é ${a + b} e
não ${2 * a + b}.`);
// "Quinze é 15 e
// não 20."

--As expressões nos placeholders, bem como o texto em volta delas são passados a uma função.
 A função padrão apenas concatena as partes em uma string única
------------

{Exemplo de .atribuição()

let teste = 'joao'

teste.length              // conta quantos caracteres tem a string 
teste.toUpperCase()       // coloca tudo em caixa alta
teste.toLowerCase()       // coloca tudo em minúsculo 
()uso parenteses para a chamada do método


{MODIFICANDO VARIÁVEIS}

Às variáveis damos um nome que aponta a um endereço na memoria que podemos de forma temporaria
alocar um valor, e este pode ser modificado a qualquer movimento
| - let nome = 'maria'
| - nome = 'maria lucia'

________________________________________________________________________

{---}Formatando números:

Var n1 = 1545.5

n1.toFixed(2)  n1 = 1545.50 
// Coloca em duas casas decimais (para colocar em mais casas troque o numero entre parênteses)

n1.toFixed(2).replace (‘.’, ‘,’)  
// Troca o ponto pela virgula

n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})
// Coloca o R$ na frente do numero (pode trocar entre outras moedas, USD)

________________________________________________________________________

[DESAFIO]

INVERTA OS VALORES DAS VARIÁVEIS A e B

var a = 10;
var b = 20;
var c = null;   // variável auxiliar utilizafa na lógica

-- reposta;

c = a;  //utilizada a variável C para armazenar temporariamente o valor da variável A (para ficar vazio)
a = b;  //sobreponho o valor da variável A (null) com o valor da variável B -20
b = c;  //sobreponho o valor da variável B com o valor da variável C (C nesse momento contém o valor da variável A)
c = null; //opcional: remove o valor contido na variável C
_________________________________________________________________________


}}[AULA 7.] (Operadores Aritimeticos - PARTE 1)

São eles:  +  -  *  /  %  
Todos esse são operadores BINARIOS pois precisam de dois operandos(numeros)

* MUTIPLICAÇÃO       -- 5 * 2 : 10
/ DIVISÃO            -- 5 / 2 : 2.5

% RESTO DA DIVISÃO   -- 5 % 2 : 1    (Divisão inteira)
(dividi 5 por 2 = 4 então sobra 1 esse valor refere-se a este operador %) (divisão inteira)

** POTENCIA          -- 5 ** 2 : 25  (5² ao quadrado² é igual a 25)

--------
}}7.1 ATENTE-SE À PRECEDENCIA DOS OPERADORES, POSIÇÃO E CONSIDERAÇÃO

EX:   5 + 3 / 2 : ??  (atente-se nas operações, na programação é considerado primeiro a divisão)
RESP: 5 + 3 / 2 : 6.5 (3 / 2 : 1.5 esse valor + 5 é igual a 6.5)
(A linguagem só dirá que está errado caso haja erro sintatico como na posição dos caracteres)

Caso precise executar a adição primeiro depois a divisão devo colocar a parte de adição entre ( )
usando os (parenteses) será mudada a ordem de precedencia!

EX:  (5 + 3) / 2 : 4  (Agora sim primeiro a adição 5 + 3 é 8 divido por 2 será  4)

-------
}}7.2 [ORDEM CONSIDERADA RESPECTIVAMENTE] >> 
PRIMEIRO  CALCULA-se OQ ESTÁ ENTRE (), dps  **²,  DEPOIS  *  /  %,  POR FIM +  -
como a * / % - tem a mesma precedencia CALCULA-se oq vier primeiro!
EX: (3 + 2) ** 2 * 2 / 5 % 3 + 6 - 2: 5

Todos resultados gerados por qlqr operação podem ser armazenados em - var (identificadores) EX:

var a =  5 + 3        : 8
var b =  a % 5        : 3   (8/5 igual a 1,, 1 vzs 5 igual à 5,, 5 para 8 igual a 3)
var c =  5 * b ** 2   : 45  (var b:3 primeiro a potencia² > b ** 2 é igual À  9,, 9 * 5: 45)
var d =  10 - a / 2   : 6   (var a:8 primeiro a divisão   > 8 divid por 2 é 4,, 10 menos 4: 6)
var e =  6 * 2 / d    : 2   (*,/ tem precendencia igual   > 6 * 2 é 12,, 12 divido por 6: 2)  
var f =  b % e + 4 / e :3   (b % e resta 1,, 1 mais (4/e: 2) 1 mais 2: 3)
FAÇA ESSAS OPERAÇÕES NO NODE!
----------
}}7.3 Operadores de atribuição

Nome	Operador encurtado	Significado
Atribuição	x = y              	     x = y
Atribuição de adição	x += y	     x = x + y
Atribuição de subtração	x -= y	     x = x - y
Atribuição de multiplicação	x *= y	 x = x * y  ....
---------------------
}}7.3 Auto-atribuição
var n = 4  >>  n = n + 4 ( somo ( n + 4: 8))  [var n] passará a valer 8
isso é chamado de auto atribuição
outros ex: n = n - 5  >>  (n - 5 : 3) a var n >> passará a valer 3
outros ex: n = n * 2  >>  (n * 2 : 6) a var n >> passará a valer 6

var n = 3
n = n + 4   - 7
n = n - 5   - 2
n = n

Auto-atribuição simplifica >>
(x)QUANDO UMA VARIAVEL SE AUTO ATRIBUI POSSO SIMPLIFICAR A FORMA DA atribuição EX:
Só posso usar este modo quando a variavel receber a si mesma.      > var k = 5
AO inves de n = n + 4 >> [posso usar >> n += 4]                    > k *= 5
                        (n + ele mesmo recebe 4)         node.>>   [25]
                                                                   > k += 5
                                                                   [30]
var n = 3 
    n += 4       7
    n -= 5       2
    n *= 4       8
    n /= 2       4
    n **= 2      8
    n %= 5       3  

 A atribuição também é válida para Strings
 let nome = 'Bom dia, '
 nome += 'Jon
 ---'Bom dia, Jon' 
------------------------------ 

}}7.4 OPERADORES DE INCREMENTO 

incremento pre  ++num
incremento pós  num++
Estas são feitas a nivel de instrução, o pre-incremento disponibiliza o valor atualizado
dentrodo contexto da instruçao onde a operção é feita, eo pós-incremento disponibliza
o valor atualizado somente após a execuçao da instrução onde a operação está contida.

esse incremento simplifica ainda mais o metodo(x) anterior veja!
Esse operador sempre incrementará (1) unidade ou decrementará (-1)
isso vai depender do sinal usado (++) ou (--)
var n = 5
AO inves de n = n + 1 >> posso usar >> n += 1 :6  ou incrementado 1 automatico
n é 6 >>  (posso usar esse incremento simplificado antes ou depois da var (++n :7))
(++n : 8   >>   ++n : 9    >>   ++n : 10   >>  --n : 9    >>   --n : 8 ....)

________________________________________________________________________

}}AULA 8 - Operadores part2 [OPERADORES RELACIONAIS]

(> maiorq,  < menorq) (>= maior ou igual, <= menor ou igual) (== igual,  != diferent)
-Pra toda expressao que tenha um operador relacional ligado a ela, o resultado será
sempre um valor Booleano (false, True)
EX:
(5 > 2 : true)    (7 < 4 : false)  (8 >= 8 : true)
(9 <= 7 : false)  (5 == 5 : true)  (4 != 4 : false)
--Exemplo com variavel
var a = 5 ... var b = 10  ...  (a > b : false)

--Quando tenho expressao Aritimeticas e relacionais juntas resolvo primeiro 
as Aritimeticas    --EX: seguindo as variaveis anteriores
(var a = 5 ... var b = 10) 
    var a >= b - 3 : false  ((var b) é 10, menos 3 é 7, logo (var a:5) não é >=7)
        var a != b : true   ((var a: 5) é diferente da  var b: 8)

------------------------------
}}8.1 OPERADORES DE IDENTIDADE ( === , igualdade restrita)] 

EX:      5 == 5 : true  (sim 5 é igual a cinco)
         5 == '5': true  (sim, mesmo sendo uma string, o Js nao testa o tipo, Number or string)
identic? 5 === '5': false (não é igual, usando === , a pergunta é se o valor é identico, neste
  caso são diferentes pois o 5 é Num, e '5' uma string) [=== igualdade restrita]
 5 !== '5': true  (5 é desigual restrito de '5', true!)

-------------------------
}}8.2[OPERADORES LOGICOS] !  &&  ||

[!]  NEGAÇÃO -   (não) >> Requiro algo se obtiver o resultado  | true  será> false |
esperado tenho TRUE, se não recebo oq peço tenho FALSE.        | false será> true  |
-EX: Operado unario, depois da !, eu coloco (false or true)      (operador unário)

(!não) for true : false ,,, algo que não é verdadeiro será falso
(!não) for false : true ,,, algo que não é falso será verdadeiro
-------
[&&] CONJUNÇÃO - ((e) lógico, X e Y)   >> Na conjunção requiro dois itens, so terei
o resultado TRUE caso receba os dois, se recebo apenas um true e outros false, no fim
o resultado sera false. Este operador é binário ou seja eu tenho dois valores logicos:

true  (&& e) true : true    (true and true is true, os dois result preisam ser TRUE)
true  (&& e) false: false   -na resposta binaria se um dos itens não for true
false (&& e) true : false    a reposta será sempre false
false (&& e) false: false
-------
[||] DISJUNÇÃO - ((ou) lógico, X ou Y) >> Da disjunção requiro dois itens, se eu
receber os dois itens otimo TRUE, se recebo um dos itens e outro diferente TRUE,
so terei um resultado FALSE caso os dois resultados sejam diferente do que requeri.
- Tambem é um operador binário ha dois valores logicos:

true  (||)  true: true  (basta que um deles seja verdadeiro para o resultdor ser true)
true  (||) false: true
false (||)  true: true
false (||)false: false  (pipe|)

-------------------------------
}}8.3 ()ATENTE-se  quando tenho operadores aritimeticos, relacionais e logicos  na mesma
operação, resolvo primeiro todos os operadores aritimeticos (** % / + *) depois resolvo
os operadores relacionais (>, <, >=, <=, !=, ==,)  e por fim resolvo os 
operadores logicos (!, &&, ||)  veja um exemplo abaixo: 

(var a = 5) - (var b = 8)
resp 2º       resolvo 1º
[a > b] &&e  [b % 2 == 0]: false

b % 2,  8 divid por 2 é 4 então me resta 0, é igual == 0, true
a > b,  a5 não é maiorq b8, então tenho false
------- true && false,  true AND false: (false)

(var a = 5) - (var b = 8)
resp 2º        resolvo 1º
[a <= b] ||ou [b / 2 == 2]

b8 / divid por 2 não é == igual a 2,     false \   false ||ou true: [true]
a5 <= é menorq ou igual a b8 sim é menorq true /   basta que um seja verdadeiro

**Se numa mesma operação eu tenho os 3 operadores LOGICOS essa será a ordem
de resolução 1º - !no  depois &&and   porfim  ||or

(ORDEM DE PRECEDENCIA ATUALIZADA)
respectivamente...
1º- Operadores Aritimeticos.  [ () ** /  ] ... "Siga a ordem depois faça os outros"
2º- Operadores Relacionais .  [ >  <  >= ] ... "Sem ordem de precedencia"
3º- Operadores Lógicos     .  [ ! &&  || ] ... "Os logicos também devem serguir essa ordem"

----------------------------
}}8.4 - [OPERADOR TERNARIO]

x [?] x [:] x - O operador ternario é a (? e :) dentro de uma mesma expressão.
ele se chama ternario por que tem 3 partes (teste) ? (verdadeiro) : (falso)
por isso ele se chamar ternario, porq ele junta 3 operandos...

(teste) 1º é um teste lógico, com resultado (true or false)
(verdadeiro) 2º é o que acontecera ser o resultado do teste for verdadeiro
(false) 3º é o que acontecerá de o resultado do teste for falso

var = media 8.5
- media 8.5           (true)       (false)
EX: média >= 7.0 [?]'APROVADO'[:]'REPROVADO'
'APROVADO'

- media += 0.5
9.0             (true)       (false)
- media > 9.1 ?'APROVADO':'REPROVADO'
'REPROVADO'

digitando essa expressão o resultado será aprovado ou reprovado,
dependerá do teste logico realizado antes
----------------------
> var idade = 19
19
> var r = idade >= 18 ? 'MAIOR' : 'MENOR'
> r
'MAIOR'
________________________________________________________________________
                            [[[-RESUMO-]]]
}OPERADORES ARITMETICOS
EX: (3 + 2) ** 2 * 2 / 5 % 3 + 6 - 2: 5
incremento pre  ++num    /  decremento pre  ++num
incremento pós  num++    /  decremento pós  num++
Estas são feitas a nivel de instrução, o pre-incremento disponibiliza o valor atualizado
dentro do contexto da instruçao onde a operção é feita, eo pós-incremento disponibliza
o valor atualizado somente após a execuçao da instrução onde a operação está contida.

}OPERADORES DE ATRIBUIÇÃO 
 x = y            (a = 5)          x = x * y     (x =* y)
 x = x + y        (x += x)         x = x / y     (x =/ y)
 x = x - y        (x -= x)
 A atribuição também é válida para Strings
 let nome = 'Bom dia, '
 nome += 'Jon
 ---'Bom dia, Jon'

}OPERADORES RELACIONAIS
(5 > 2 : true)    (7 < 4 : false)  (8 >= 8 : true)
(9 <= 7 : false)  (5 == 5 : true)  (4 != 4 : false)

}OPERADORES DE IDENTIDADE
5 == 5 : true  (Nums iguais)
5 == '5': true  (Num e String igual)
5 === '5': false (Num e String são identicos ? nn)

}OPERADORES LÓGICOS 
[!] no    [&] and     [||] or
    não       e            ou

}OPERADOR TERNARIO
X [?] X [:] X
var = media 7.5  
media 7.5   (test)    (true)       (false)
EX: média >= 7.0 [?]'APROVADO'[:]'REPROVADO'  : 'REPROVADO'
      
}ORDEM DE PRECEDENCIA
respectivamente...            {1º  2º  3º}
0º- Comando Math. primeiro    [Math.pow()] ...  "Comando math antes dos parenteses"
1º- Operadores Aritimeticos.  [ () ** /  ] ...  "Siga a ordem depois faça os outros"
2º- Operadores Relacionais .  [ >  <  >= ] ...  "Sem ordem de precedencia"
3º- Operadores Lógicos     .  [ !  && || ] ...  "Logicos também devem seg essa ordem"
4º- Operador Ternario      .  [[?] x [:] ] ...  "Sempre o ultimo a ser feito"
________________________________________________________________________

][Escopos em Javascript]

O que é escopo ?
    Escopo é a acessibilidade de objetos, variáveis e funções em diferentes partes do código.
Em outras palavras, o que determina quais são os dados que podem ser acessados em umadeterminada
parte do código é o escopo. Imagine que escopo é uma caixa e tudo que for criado nela pode ser
acessado por qualquer objeto dentro da mesma. Um escopo é criado sempreque definimos uma função.
[+ info: https://imasters.com.br/desenvolvimento/escopos-em-javascript]

1- Escopo global: Escopo do script como um topo
2- Escopo de funcao: Corresponde ao coneudo dentro de um bloco de funcão
3- Escopo de bloco: São instruções inseridas dentro de comandos como - if, switch {}

Sabendo-se que exitr 3 tipos de escp´ps vamso entender como a declaração de variaveis
utilizando o operador VAR se comporta em cada um desses escopos.

))VAR global podem ser acessadas pelos escopso de /função e blocos/

var nome = 'Maria';
        if (true) {
            document.write(nome);
        }

        document.write('</br> </br>')

        function x() {
            document.write(nome);
        }
        x()  // chamando a função

))VAR criada dentro dum escopo de bloco pode ser acessado de forma global, pois o comando
[-VAR faz um Hoisting(içamento) uma elevação de declaração de variavel, fazendo com que
a variavel seja acessada em qualquer parte do codigo, global e funcion{}, VEJA:

var nome = 'Maria';
        if (true) {
            var seie = 'Mr robot'
            document.write(nome);
        }

        document.write(serie)       // podera ser acessada no escopo global

        document.write('</br> </br>')

        function x() {
            document.write(nome);
            document.write(serie)    // poderá ser acessada no escopo funcao
        }
        x()  // chamando a função

))Porem, se eu criar uma VAR dentro do escopo de função está não sofrerá um Hoisting(elevação)
pois as variaveis criadas em Funcion pertencem apenas a si mesma.
{Um escopo de bloco(if, switch) criado dentro duma funcion poderá ser içado para fora
fazendo com que o funcion use suas variaveis!}

var nome = 'Maria';
        //escopo de block
        if (true) {
            var serie = 'Mr robot'
            document.write(nome);
        }
        // parte global
        document.write('</br> </br>')
        document.write(serie)
        
        document.write('</br> </br>')


        //escopo de funcao
        function x() {

            document.write(nome);
            document.write(serie)

            var idade = 'Dezoito'
        }

        x()
        document.write(idade)  // variavel declarada em funcion, n será exibida no escopo global.

)) EM RESUMO: 
Se eu declaro uma variável no escopo global, consigo usa-la dentro de um escopo de bloco e de função.

Declarando no escopo de bloco, depende de onde este bloco se encontra. Se global eleva global,
Se função eleva para função.

No escopo de função só conseguirei usar a variável dentro da função em que a variável foi declarada.

________________________________________________________________________

MODULO C
}}9. [DOM - DOCUMENT OBJECT MODEL] - Modelo de objetos para documentos
- DOM É A VERTENTE WEB DO JScript -É um conjunto de objetos poderosos dentro do navegador
que da acesso aos objetos internos dos sites, serve pro tratamento de componentes visuais.

-Entendendo o DOM
Basicamente é um conjuto de objetos dentro do navegador que vai dar acesso aos 
componentes internos  do webSite, o DOM (não funciona dentro do node JS) ele só 
está presente quando estou rodando JS dentro do navegador.
------------

}}9.1  AROVORE DOM
A arvore DOM começa da raiz chamada window
(raiz)
1.0 [window]    - (tudo do js está dentro do objeto chamado window)
dentro do window tenho varios outros objetos >>
1.1 [location]  - (localização do site, URL, pagATUAL, pagANTERIOR)
1.2 [document]  - (Documento atual onde está o HTML JS)
1.3 [history]   - (Armazena de onde vc veio pra onde você vai, facilita a navegação)

dentro de DOCUMENT, tenho o object HTML

[1.2 document > HTML]     > html é o um (parent) de head e body
          > head > body   > são filhos de HTML então são (child)
"quem está acima é PARENT, logo os ligados abaixo são CHILD"

.document (parent de HTML)
   |
    HTML  (parent de body && child de .document)
     / \
head     \ body (child de HTML)          \
 |           \                            -- [Elementos da Arvore DOM]
 |            \                          /
meta title     |
             h1, p, h2, div

( ESSA É A ARVORE IERARQUICA DO SITE QUE ACABEI DE CRIAR )
---------

}}9.2  SELECIONANDO ELEMENTOS NO DOM
[metodos de acesso]
-Posso selecionar objetos da arvore de varias formas são elas
- (por marca)-(por ID)-(por NOME)-(por Class)-(por SELETOR)

dento de .document
(por MARCA) - getElementByTagName() 
neste comando seleciono o primeiro paragrafo do meu doc. html
-Seleciono por VAR
-- var p1 = window.document.getElementsByTagName('p')[0] <--ordem d paragrafos
window.document.write('Está escrito assim.' + p1.innerText)
p1
//innerText - o text oque está dentro da tag
//innerHTML - mostra o conteudo e a formatação dele

------

(por ID) getElementtByID()
<div id="msg">Clique em mim</div>  <!--id or name-->

var d = document.getElementById('msg')
      div.style.background = 'gray'   // posso mudar estilo
         div.innerText = 'Estou aguardando...'   //mudei o conteudo da div
-----

(por NAME) getElementsByName()
 // essa mesma seleção pode ser feita por ID, NAMEs [0,1,2]...
 elementos como form onde há names
-----

(por CLASSE) getElementsByClassName()
Quando o comando estiver no plural 'ElementS' devo usar o identificado [] para indicar a ordem
-----

(por seletor)  querySelector()    ('.classe)  ('#id)   
 por CSS       querySelectorAll()

 <div id="query">AQUI FOI USADO O querySelector por CSS</div>
      var divquery = document.querySelector('div#query')
        divquery.style.background = 'purple'

--Quando tenho mais de um obejtos da mesma classe ou do mesmo nome vou usar mais 
(getElementsByName)
--Quando quer selecionar um objeto ou a famiila deles vou usar o (getElementById)
------------------------------

}}10- [Eventos DOM]
-DOM Documento object MODEL, ele é um facilitador que exite dentro do navegador
para dar acesso aos Elementos diretamente no javaScript

Eventos Dom (Dom Events) são utilizados para notificar o código de novidades durante a navegação
do usuário. Cada evento é representado por um objeto que é baseado na interface Event, e pode
ter campos customizados adicionados e/ou funções usadas para obter informações adicionais sobre
o que aconteceu. Eventos podem representar desde interações básicas do usuário (cliques, rolagem
da página...) até notificações automáticas de novidades no DOM.
[+info: https://developer.mozilla.org/pt-BR/docs/Web/Events]

EVENTOS é tudo aquilo que possa acontecer com determinado item (div, h1..)
Aventos mais comuns por exemplo numa div, são eventos de mouse, 
- mouseEnter,  mouseMove, mouseDown,   mouseUp, click mouseOut (img ilustra)
mouseEntrou, mouseMoveu, mousePrecionado, mouseSolto, cliquei e mouseFora
[+info em - MDN js events (lista de eventos)]

(Função em javaScript) funcion
É um conjunto de codigo/linhas que vao ser executadas só quando o evento ocorrer
a função encapsula determinado block de codigo com objetivo bem definido e atravez das
chamadas das funções podemos executalas
funcion Nome da Função. ['verb'substantiv - abrirJanela] mesma regra para criação de VAR
Lista de argumentos para a função, entre parênteses e separados por vírgulas. ( )
Declarações JavaScript que definem a função, entre chaves { }.
Essas declaração/parametros são variaveis criadas que serevem para auxiliaa a fincion

-Dentro da Funcion posso incluir de tudo - Estruturas de repetições, condicionas, swift,
podmeos declara variaveis, podemos utilizar operadores aritmeticos e ETC. emfim, 
a intenção é criar um subprograma da nossa aplicação

---------- Sitaxe funcion
[funcion]
BLOCO EM javaScript é delimitado dento dos sinais de {}
           nome evento
em  funcion clicarJanela() {
  [comando que será execultado apenas quando o event acontecer]
  [toda pag. será carregada mas o evento só depois da ação]
  [os parametros () devem ser preenchidos respectivamente]
}

 <div id="area" onclick="clicarJanela()" onmouseenter="entrou()">
        Interaja...
    </div>

EX:  <script>
        var a = document.querySelector('div#area')
//deixando a VAR fora do funcion posso usala para todas as açoes sem precisar repetir o codigo
        function clicou() {
            a.innerHTML = 'Clicou!'
            a.style.background = 'red'
        }
     </script>

[ Os paramentros () em JS podem ser passados ou não, também pdoem ser incluindo mais parametros
doq se é esperando, o JS só considerará os parametros que são mencionados dentro do funcion. 
E caso o valor do parametro n for passado ou apenas um for, o segundo será entendido como undefined
trandendo o resultado NaN - not a number.
    
(EVITANDO a poluIção na tag DIV do HTML, coloque os EVENTOS dentro do <script>) listners / ouvidores

EX:       var a = document.getElementById('area')
            a.addEventListener('click', clicou)                 / script js - coloco a  var
            a.addEventListener('mouseenter', entrou)            \ e os listners
            a.addEventListener('mouseout', saiu)

---------
]funcion ANONIMA

Posso criar uma funçao anonima/sem nome, simplismente criando uma VAR e atribuindo a ela uma
funcion. Com isso exibirei a VAR da mesma forma que exibo uma funcion nome e ()

EX: var calc = funcion {}   >  para exbiri escrevo >  calc()




________________________________________________________________________

]}11 - CONDIÇÕES  part1

{RESUMO} - Os comando (IF - ELSE) consite numa estrutura de controle, eles nos possibilita com base 
numa determinada condiçao definir qual será o fluxo que a aplicação tomará. E eles que podemos
fazer diversas verificações para criar fluxos dentro das nossas aplicaçoes q atendam todos os tipos
de possiblidades, ao menos todas aquelas que sao possiveis de serem previstas. Ao prevermos 
possiblidades dentro do nosso codigo podemos evitar falhas e bugs.

Condição simples [if], se a condição for FALSE nada acontecerá e o programa continuará rodando. if {}

Condição Composta [else]  com essa se o resultado for true o programa irá por 
um caminha, se for false ele irá por outro caminho

    var pais = 'França'
            console.log(`Vivendo em ${pais}`)
            if (pais == 'Brasil') {
                console.log(`Você é Brasileiro !`)
            } else {
                console.log(`Você é Estranjeiro!`)
            }
            ## textos interpolados entre crases ``
        
-- para execultar comando no console do VScode devo usar '' console.log ''
________________________________________________________________________

}}12 - CONDIÇÕES part2   [Condições Aninhadas]

Nas condições Aninhadas posso aumentar minhas possibilidade de programação colocando
condições dentro de condições. Aninhando uma condição dentro da outras  (aninhar.jpg)

Condições aninhas 

if { condição 1 }
    se a condição 1 for verdadeira - essa será execultada
    |
    else {  ??  }
        caso a condição anterior for falsa, a prox condição será chamada dentro do else
            |
        if { condição 2 }
             caso a condição dois for satisfeita, essa será execultada
             só será execultada se a cond1 for falsa
                |
            else {  bloco 3 }
                    Esse será  execultado caso a condição dois for falsa

img (condiçoes-aninhadas.jpg)
**Também poderia colocar outra condição no meu bloco3, assim eu estaria aumentando 
um nivel no meu aninhamento.

[Ao fazer condiçoes sejam compostas ou aninhadas tome cuidado com ao escrever o codigo
às vezs você pode não ter erro sintatico no codigo, mas pdoe haver erros lógicos, fazendo
com seu programa funcione bem, mas de foma errada.]

var idade = 19
console.log(`Você tem ${idade} anos,`)
if (idade < 16) {                                      [se a idade for menorq 16 não vota]
    console.log('Não vota!')                            (else, if)
} else if (idade >= 16 && idade < 18 || idade > 65) {  [senão, se a idade for < 18 e > 65, voto opcional]  
        console.log('Voto opcional!')
    } else if (idade >= 18) {                          [se a idade for >= 18 voto obrigatorio]
        console.log('Voto obrigatório!')
    }
** ATENTE-SE A INDENTAÇÃO DO CODIGO, PARA TUDO FUNCIONAR BEM **
ASSISTIR NOAMENTE ATÉ MINUTO 17 -- DEPOIS EXCLUA ALINHA
--------------------------
}}12.1  - Condiçoes Mutiplas

Conheçamos a expressão switch - mais usada para valores fixos, (essa condição/ expressão)
serve para valores fixos, se tenho determinado resultado é execultado um comando,
se tenho outro resultado, então outro comando diferente será execultado (cond-mutipla.jpg)
(**essa codição mutipla não é aplicavel para todos os tipos de situação, ela não serve
bem para intervalos de valores como a condição if, mas sua constituição é parecida.)
  - para essa condição usaremos o  [switch] e dentro dele o (case)
            switch ( ){
                case [e um bloco relacionado, igual ao if]
            }
            }default: // o parametro default serve como uma saída caso as condições
            anteriores não forem o resutado esperado, (default é como o ELSE)
            }break   // dentro de cada bloco {} devemos colocar o break pois ele tem
            a função de encerrar para que todos os parametros nao sejam executado.
EX:
    var agora = new Date()         // chamada da data
    var diaSem = agora.getDay()   // os dias da semana começam em  0, 1 ,2 - dom, seg, ter
    switch(diaSem) {
        case 0:
            console.log('Domingo')
            break                              // o BREAK é obrigatorio para que nao haja erro
        case 1:                               // break identifica o fim dum comando e segue o fluxo.
            console.log('Segunda-Feira')
            break
        case 2:
            console.log('Terça-Feira')
            break
        case 3:
            console.log('Quarta-Feira')
            break
        default:
            console.log('ERRO - Dia da semana inválido')
            break   
    }  [A condiciona (Switch) só aninalisa oq é identico ===]

+ info [Com javascript posso criar um site com interatividade apenas com o sistema
ou apenas com o usuario]

O switch case é uma estrutura condicional do Javascript como o if, e serve para analisar os valores
e executar um bloco de código condicionalmente. Normalmente é utilizado, quando se deseja analisar
diversos valores diferentes para a mesma variável.

------------- 
+ info []
Para criar um elemento Js para ser exibido no HTML:

ver img = document.creatElement('img)
também posso adicionar um id ao elemento criado

img.setAttribute('id', 'foto')
_____________________________________________________________________________

}}13 - LAÇOS DE REPETIÇÃO / iteraçoes

AS REPETIÇÕES SÃO COMANDOS REPETIDOS QUE EXECUTAMOS PARA QUE UMA DETEMRINADA TAREFA SEJA 
CONLUIDA, [de um ponto A até um ponto B vou execultando tarefas sequenciamente]. No meio 
dessa sequencia pode haver passos que eu não deva execultar porque nem tudo é sequencial
às vezes tenho desvios ou outras possiblidades, com isso devemos usar 
as condiçoes que aprendemos anteriomente, seja simples ou compostas

Existem várias formas diferentes de laços, mas eles essencialmente fazem a mesma coisa: repetir
uma ação múltiplas vezes (inclusive você poderá repetir 0 vezes). Os vários mecanismos diferentes
de laços oferecem diferentes formas de determinar quando este irá começar ou terminar. Há várias
situações em qé mais fácil resolver um prob. utilizando um determinado tipo de laço do que outros.

Os possíveis laços de repetição em JavaScript:

// + info[https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration]
for_statement 
do...while_statement
while_statement
label_statement
break_statement
continue_statement

for...in: O loop for...in é usado para iterar sobre as propriedades enumeráveis de um objeto. 
Ele extrai as chaves do objeto em cada iteração

for...of: O loop for...of é usado para iterar sobre elementos iteráveis, como arrays, strings,
 objetos iteráveis (por exemplo, Set, Map). Ele extrai os valores dos elementos em cada iteração.
------

Os laços de repetição testa uma mesma condição varias vezes enquanto ela for verdadeira,
se repete até que o valor da condição mude (images/while)   EX:

}} [WHILE] ESTRUTURA DE REPETIÇÃO COM TESTE LÓGICO NO INICIO]
faz-se o teste e sendo verdadeiro será feito o bloco{}

enquanto
while (condição) {     
    [block] tudo que esta entre chaves é um bloco   
}
    [enquanto a condição for TRUE o laço(block) se repetira até q isso mude]
    [quando a condição for FALSE  o fluxo será desviado para fora das {}]

---------------EX
funcion (comerPizza) {
    while (temFatia()){    [enquanto o teste feito for TRUE o laço se repetira até q isso mude]
        comerFatia         [enquanto houver fatias serão comidas, até que acabe e o fluxo siga]
    }
}
---------------EX
var c = 1 
while (c <= 6) {
    console.log(`Passos ${c}`) 
    c++                            (o cod será incrementado +1 até que o valor chegue a 6)
}
---------------------------
}[DO WHILE] - ESTRUTURA DE REPETIÇÃO COM TESTE LÓGICO NO FINAL

O loop será execultado ao menos uma ve no inicio mesmo se o teste de execução for falso
var d = 1 
do {
    console.log(`DO-WHILE ${d}`)
    d++
} while (d <=3)

/* (haverá casos e casos e para isso temos as duas opções) o [while] é a mais usada
---------------------------------------

}}14 REPETIÇÃO part2 - [ESTRTURA DE REPETIÇÃO COM VARIÁVEL DE CONTROLE]

Essa estrutura é representada por um Exagono irregular <___> nele são feitas 3 coisas
(1- INICIALIZAÇÃO  2- UM TESTE LOGICO   3- INCREMENTO)
Na primeira passagem é feito a (inicialização e o teste lógico) SENDO este teste lógico
verdadeiro será execultado o bloco {o bloco pode ter 1 ou varios comandos}
Feito o bloco o laço se repetirá fazendo o 3º passo (ICREMENTO) então, o teste lógico
é feito mais um vez e sendo verdadeiro o bloco será execultado e fará outro ICREMENTO
e o looping vai acontecendo até que o teste lógico tenha o resultado FALSE então o codigo
seguira para fora do bloco {}  (ESSA É [ESTRTURA DE REPETIÇÃO COM VARIÁVEL DE CONTROLE])

{[WHILE e FOR] usamos quando sabemos os limites das execuções (var c=1; c<=10; c++)}

---EX:
var c = 1
while (c <= 5) {
    console.log('Bom dia!')
    c++
}

/* Mesmo cod. usando FOR */

for (let c=1; c <= 5; c++) {    <---  [aqui tenho, inicialização calculo e incremento]
    console.log('Bom dia!')
}

[Posso usar o modo de DEPURAÇÃO / DEBUG, para monitorar a execução dos Scripts,
saber se estão funcionado bem ou se há erros]
 } Atente-se as vezes não ha erro no coddigo(sintaxe) mas pode haver erros de llogica }

[Eplicando - Declaração for

Um laço for é repetido até que a condição especificada seja falsa. O laço for no JavaScript
é similar ao Java e C. Uma declaração for é feita da seguinte maneira:

for ([expressaoInicial]; [condicao]; [incremento])
  declaracao
Quando um for é executado, ocorre o seguinte:

A expressão expressao Inicial é inicializada e, caso possível, é executada. Normalmente essa
expressão inicializa um ou mais contadores, mas a sintaxe permite expressões de qualquer grau
de complexidade. Podendo conter também declaração de variáveis.

A expressão condicao é avaliada. caso o resultado de condicao seja verdadeiro, o laço é executado.
Se o valor de condicao é falso, então o laço terminará. Se a expressão condicao é omitida,
a condicao é assumida como verdadeira.

A instrução é executada. Para executar múltiplas declarações, use uma declaração 
em bloco ({ ... }) para agrupá-las.

A atualização da expressão incremento, se houver, executa, e retorna o controle para o passo 2.
----------

[] break: O comando break é usado para interromper imediatamente a execução do loop e sair dele.
 Quando o break é encontrado, o programa pula para a próxima instrução após o loop. Isso é útil
quando você deseja interromper o loop prematuramente com base em uma condição específica.
for i in range(1, 10):
    if i == 5:
        break
    print(i)  [neste exemplo o loop irá até o 4]
----------

[] continue: O comando continue é usado pra pular a iteração atual do loop e avançar para a próx
iteração. Quando o continue é encontrado, o programa retorna ao início do loop e verifica a próx
iteração, ignorando as instruções restantes dentro do bloco de código para aquela iteração 
específica. O continue é útil quando você deseja ignorar algumas iterações
i = 0
while i < 5:
    i += 1
    if i == 3:
        continue
    print(i)    [nesse exemplo o loop ignorará o numero 3 e continuará iterando]

{[]} IMPORTANTE!
   É importante salientar que os loops fazer processos repetitivos de varias checagem, e isso 
pode exigir mais processamento e tornar o programa mais lento, sabendo disso é importante ao
usa-ho fazer checagem para saidar do loop em execulçoes longas caso seja possivel, assim
evitado repeticoes desnecessaris do loop, fznd programas mais ageis. (var sinalizadoras[flags])

[FLAGS] Variáveis sinalizadoras, também conhecidas como flags, são variáveis booleanas, são
utilizadas para sinalizar ou indicar o estado de algo num programa. Elas são geralmente usadas
pra controlar o fluxo de execução, tomar decisões ou indicar a ocorrência de determinadas condições
    As variáveis sinalizadoras são úteis em situações em que é necessário lembrar ou acompanhar
o estado de algo. exemplo:, num programa de processamento de dados, uma [flag] pode ser usada para
indicar se um determinado evento ocorreu, como a finalização de um loop ou a conclusão de uma tarefa.
________________________________________________________________________


}}15 ARRAY - [VARIAVEIS COMPOSTAS]

- Variaveis simples só conseguem armazenar um valor por vez,( apenas um valor) EX:
VAR n = 5  >>  VAR n = 20  ( o valor da var será  subistituido)

- Variaveis compostas podem armazenar varios vares na mesma estrutura  EX:

Criando um Array  ou ( VETOR - variável com varios espaços)
var frutas = ['Maçã', 'Banana', 'Pera];

console.log(frutas.length);
// 2
Acessar um item (index) do Array
var primeiro = frutas[0];
// Maçã
var ultimo = frutas[frutas.length - 1];
// Banana
-----
Numa variavel composta, posso criar uma var com varios itens, e identificalos com indices
(uma VAR que guarda varios valores) - auto
vetor array  ou variavel composta  é \        - var auto = []
[VETOR É UMA  VARIAVEL CM VARIOS ESPAÇOES]    - var auto = ['gol', 'hb20', 'argo']
[Um VETOR  é composto por elementos]                         0       1       2  <--- indice/chave
[UM elemento VETOR, é um par que agrupa >> O espaço na memoria, o valor atribuido a ele(nome)
e o indice - que são os numeros das posições aos valores [0,1,2,3,4,5...]]

(cada  array é composta por um 'valor' e uma  chave de identificação)

----- let num = [5, 8, 2]  - um vertor com 3 elementos
                 0  1  2

let num = [5, 8, 2]
console.log(`Nosso vetor é o ${num}`) --- Nosso vetor é o 5,8,2

num[3] = 6      /* adicionando um indice [3] + valor = 6  (ou substitui indice já existente) */
console.log(`Agora nosso vetor é ${num}`)  -- Agora nosso vetor é 5,8,2,6

num.push(7)     /* o push adiciona o valor criando sempre um novo indice [4]  */
console.log(`Agora nosso vetor é ${num}`)  -- Agora nosso vetor é 5,8,2,6,7

/* Para sabe o comprimentdo de um vetor(quantidade de indices  num.length) */
console.log(`meu vetor tem ${num.length} posições`) -- Meu vetor tem 5 posições

/* mostrando posição de forma isolada */
console.log(`O primeiro valor do vetor é ${num[0]}`)  -- O primeiro valor do vetor é 5
console.log(num[1])  /* o segundo valor é 8 */  (5,8,2,6,7)

/* metodo sort() */
num.sort() /* colocará  os valores em ordem crescente*/  [2,5,6,7,8]

Ordenação numerocia sort Com função a-b para subtrair
     let num = [5, 1, 13, 25 ,66 ,45];

        res.innerHTML = `${num.sort(ordenar)}`

        function ordenar(a, b) {
            return a - b; // a - b percorre todo array subtraindo seus valores e hos reordenando
            // se a - b for < 0 : então A é ordenado antes
            // se a - b for > 0 : então b é ordenado depois
        }

**} ATENTE-SE, A ORDEM DAS LINHAS DE CODIGO POD INFLUENCIAR O REUSLTADO FINAL DO PROG.}

} Mostrando VETORES sme formataçao - não é bonita pra um produto final

let valores = [1,5,6,7,8,2,5,6]

console.log(valores)  - metod sem formatação
~ [1,5,6,7,8,2,5,6]

}motodo FORMATADO!   - chamado: percurso para exibição do vertor
/*enquanto POS for menor que tamanho do vetor NUM, icremente +1 no POS*/
for(let pos= 0; pos < num.length; pos++) {
    console.log(num[pos])
}

} MODO SIMPLIFICAOD 
for(let pos in num) {  /* para cada posição dentro de NUM, mostrarei o NUM[pos] posição do num */ 
    console.log(num[pos])
}

} BUSCAR valores no VETOR  indexOf(5)
console.log(`A posição/index do 6 é: ${num.indexOf(6)}`)
~~ A posição/index do 6 é: 1

/*valor que não exita na variavel  > -1 */ retorna -1
console.log(num.indexOf(55))

Nos arrays posso adicionar numeros nomes e valores boleanos
--------

[] ARRAYS MULTIDIMENSIONAIS 
Os arrays multidimensionais no JavaScript fornecem recursos de manipulação de dados mais avançados
como adicionar, remover ou modificar elementos. Além disso, vc pode realizar operações matemáticas
e algoritmos nos elementos do array.

{} simbolo para criar objetos
[] simbolo para criar arrays

- PARA INCLUIR ELEMENTOS NUMA ARRAY USO 
produtos.push('arroz)
produtos.mercado.push()

- PARA INCLUIR NO INICIO USO
produtos.unshift('arroz)


-PARA EXCLUIR UM VALOR DO ARRAY USANDO POP()
produtos.pop()

'PARA ESCLUIR NO INICIO USO
produtos.shift()
-----

slice() é usado para extrair uma parte de um array, sem modificar o array original.
Ele retorna uma cópia dos elementos selecionados num novo array. A sintaxe do método slice() é:
}} array.slice(início, fim);

O método splice() é usado para modificar o conteúdo de um array, adicionando ou removendo
elementos. Ele pode alterar o array original, adicionando os elementos especificados ou
removendo elementos com base nos índices fornecidos. 

array.splice(índice, quantidade, elemento1, elemento2, ...);

array: O array original que você deseja modificar.
índice: Índice onde a modificação deve começar.
quanti: Número de elementos a serem removidos a partir do índice. Se for 0, nenhum element será removido.
-----------
[]for...in 
uma estrutura de loop em JavaScript usada para iterar sobre as propriedades enumeráveis de
um objeto. Ele não é especificamente projetado para mostrar os elementos de um array, 
mas sim para percorrer as chaves ou propriedades de um objeto.

const pessoa = {
  nome: 'João',
  idade: 30,
  profissao: 'Engenheiro'
};

for (const chave in pessoa) {
  console.log(chave + ': ' + pessoa[chave]);
}

}SAIDA:
nome: João
idade: 30
profissao: Engenheiro
-----------
}forEach 
é um método disponível em arrays em JavaScript que permite iterar facilmente pelos elementos
do array e executar uma determinada função para cada elemento. Ele é uma alternativa mais
conveniente e legível ao loop for tradicional quando vc precisa percorrer os elementos dum array.

A estrutura básica do forEach é a seguinte:
const frutas = ['maçã', 'banana', 'laranja'];

frutas.forEach(function(fruta) {
  console.log(fruta);
});

O forEach é usado para executar uma função de callback em cada elemento do array. Essa função
de callback pode realizar qualquer operação que você queira realizar com cada elemento. 
Isso pode incluir exibição, cálculos, modificações nos elementos, atualização de valores 
externos, envio de dados para um servidor, entre muitas outras possibilidades.
}+FOREACH
const numeros = [1, 2, 3, 4, 5];
let soma = 0;

numeros.forEach(function(numero) {
  soma += numero;
});

console.log(soma); // Output: 15
}//=O forEach so atual em array  com indices numeros e que se iniciam em 0
caso contrario o array sera desconsiderao

________________________________________________________________________


}}16 [FUNÇÕES]

1º Toda funçao precisa ter uma CHAMADA, a chamada pode ser verbal ou autmatizada
2º Preciso de um parametro de entrada para poder execultar a função
3º Depois da chamada e do parametro de entrada peciso execultar uma ação
4º Por fim daremos o retorno
(CHAMADA, CONJUNT DE PARAMETROS, AÇÃO E RETORNO)
nem todas as ações tem paramatros e retornos

{{FUNÇÕES SÃO AÇÕES EXECUTADAS ASSIM QUE SAO CHAMADAS OU EM DECORRENCIA DE UM EVENTO}}
{{UMA FUNÇÃO PDE RECEBER PARAMETROS E RETORNAR UM RESULTADO}}

] DENTRO dos parenteses, adiciono PARAMETROS [ ação(X) ], esses parametros serão processados aq pela
ação e podem ter um resultado. Essa ação não se execultará por padrão, para execultá-la preciso de
uma CHAMADA [ ação(5) ] com essa CHAMADA, 

OS PARAMETROS FICAM ENTRE PARENTESES NA FUNÇÃO ()   funcion(paramt.) {}
              ,[(n) parametro formal]
function chamada(n) {  
    if (n%2 == 0) {   <[ação - calculo]
        return 'par'   <[retorno]
    } else {
        return 'impar'   [tenho 2 return mas só o TRUE será aplicado ao let]
    }
}
                   ,[CHAMADA- parametro real]
let res = achamada(11)  <[aq A CHAMADA: linha de disparo da ação enviado acima]
----------------
function soma(n1, n2) { // declaro os parametros que n pode ser apenas numeros 
    return n1 + n2; // retorno com a soma desse parametros
}
------
function soma(n1=0, n2=0) { // declaro os parametros que n pode ser apenas numeros 
            // posso inserir o valor dos parametros ja na funcao
    return n1 + n2; // retorno com a soma desse parametros
}

console.log('A soma dos valores:' + soma(5)); // imprimo a funcao soma, inserindo nela o valor dos parametros
//se um dosp parametros n for passado terei o resultado NaN o valor n passado será indefinido
// Posso inserir o vaor dos parametros na funcion ou na varivel de retorno

----

// fatorial do numero 

function fatori(n) {
    let fat = 1;
    for (let cont = n; cont > 1; cont--)
    fat = fat * cont;
    return fat
}
console.log(fatori(4))
----

] Funcao Recursiva/ RECURSIVIDADE

A funcao recuriva acontece qudo a funcion chama a si mesma

function fatorial(n) {

    if (n == 1) {  // se o fatorial igual a 1
        return 1; // retorne 1
    }else {
        return n * fatorial(n-1) // se não for retorne o o numero inseriod vezes ele mesmo menos 1
    }
}

console.log(fatorial(3))
________________________________________________________________________

[]} Funcion UDEMY

    Uma funcao tem o objetivo de encapsular determinado bloco de codigo que possui um objetivo
bem definido, e atravez das chamadas das funcoes podemos recupero-las e reutilizar em 
varias partes do nosso programa.

Posso utilizar uma funcion de forma VOID apenas a deixando execultando uma logica ou posso 
aplicar a ela uma return fazendo com que essa logica posso ser aplicanda a outras partes do
programa se necessario.

funcion (a, b, c) <-- Os parametros duma funcao podem ser declarados ou nao, e msm sendo aplicados
caso haja o requerimento de parametros a mais (a,b,c,d) o JS de forma inteligente irá ignora-los
-- Caso seja passado parametros a menos, o parametros n inserido será lido pelo JS como undefined
com isso a logica retornará not a number NaN.
    Por fim, caso nao seja passado nenhum parmetro o retorno tmb será NaN, com isso ressaltamos
a flexibilidade do javascript
----

    } Escopo de variaveis

Escopo global / escopo de funcao / e escopo de bloco

Escopo global refere ao script como um topo
Escopo da funcao refere as variaveis dentro duma funcao
Escopo de bloco refere-se aos comando inseridos detro de blocos com swift e if/else 

Em resumo posso criar variveis para ser acessadas por todos programas, dentro de if/ crio 
let que podera ser acessada apenas la dentros e caso queira uma elevação da variavel uso o
nome VAR - ja nas funcion, todas as VAR e LET so podem se utilizadas la dentros, nao havendo
elevaçao para fora da funcao.
Casa hja blocos dentro duma funcion, as VAR criadras no bloco serao iaçadas para fora assim
ficando disponiveis para a funcion.
-----

    }Funcion anonima

A funcion anonima é criada sem nome para que seja exultada apena numa parte do codigo, 
ou posso colocala dentro duma variavel VAR (funcion expression), com isso passo chama-la ao
requerir a VAR EX:

var showIMC = function(peso, altura) {
    var imc  = peso / altura ** 2
    console.log(imc.toFixed(2))
}
showIMC(75, 1.75)
------

    }Funcion CallBack

Funcion de CallBack é apenas funcions encaminhadas como parametros ( funcion, funcion2) para
outras funcions, nela colocando if/else para reseber umma funcion ou outra funciion e com isso
dar continuidade no processament da logica de programacao EX: PSEUDOCODIGO

funcion ShowArchive(id, callbackSucesso, callbackERRO)
logica para recuperar o arquivo com base no ID

if (?) {
	callbackSUCESSO (' titulo do arquivo')
else {
	callbackERRO ('erro') }

-Temos duas duncoes encaminhadas como parametros de uma funcao principal quer retornará uma
 das duas dependendo das condicoes!

-Encapsular as funcoes anonimas dentro de variveis acaba sendo uma boa pratica, deixando
o codigo mais limpo

Posso ter o memso efeito usanfo a sitaxe de ARROW FUNCION () => {} dentro duma varivel

AS funcoes em JS são como quaquer outro valor, posso atribui-la a uma variavel, coloca-la como
 parametro de outra funcao, encare funcion como qualweur outro obejte, array, number boolear..
 ] POSSO DECLARA UM FUNCION DE VARIAS FORMAS

1- funcion soma() {}  [forma padrao]

2- const somar = funcion(a,b) {  [funcion expression] quando colocada numa variavel
    return a + b;                -essa funcão pode ou nao ser anonima, (com ou sem nome)
}

!DIFERENÇA ENTRE FUNCOIN NOMEADA E ANONIMA
A principal diferença entre as duas formas é que a função nomeada pode ser referenciada
diretamente pelo seu nome, enquanto a função anônima precisa ser referenciada por meio
da variável ou constante à qual foi atribuída. 

3- const minhaFuncao = () => {}
!!(Funcao Arrow Ela é uma alternativa mais simples e elegante para escrever funções que têm
apenas uma expressão como corpo.
!FUNCOES RECEBEM ARGUMENTOS E RETORNAM VALORES!

[}clik] [EXEMPLO DE OBEJTOS EM JS]
    { const person = {                      (obejto atribuido a uma const)
    name: 'John',
    age: 35,
    isMarried: true,
    hobbies: ['reading', 'hiking', 'cooking'],
    address: {
        street: '123 Main St',
        city: 'Anytown',
        state: 'CA',
        zipCode: '12345'
    },
    sayHello: function() {
        console.log(`Hello, my name is ${this.name} and I'm ${this.age} years old.`);
    },
    introduceHobbies: function() {
        console.log(`My hobbies are ${this.hobbies.join(', ')}.`);
    } --------------
    Com um objeto, é possível agrupar informações relacionadas em um só lugar e acessá-las 
    facilmente usando as propriedades do objeto. O objeto pode ser passado como argumento
    para funções e pode ser usado para interagir com outros objetos e APIs em JavaScript. }

4- const mfuncion = () =>      [Funcion arrow anonima]
4- const mfuncion = parametro =>      [Funcion com um parametro n precisa de ()]
4- const mfuncion = (a, b) =>      [Funcion com  mais de um paramt. precisa de ()]
!!(As funcoes arrow não consegue fazer içamento

Em resumo, ao utilizar arrow functions, é importante lembrar que o comportamento do this 
é diferente em comparação com funções tradicionais. Em muitos casos, você pode evitar 
confusões sobre o this ao usar funções tradicionais, especialmente quando você precisa 
se referir ao objeto pai ou a um contexto específico.

----------------------------------
[]As arrow funcions podem ser plificadas ao maximo da seguinte forma
quando há apenas um paremtro e apena um retunr: 

quadrado = (x = 0) => x * x; // return implicito
        document.write(`${quadrado(7)}`);
---------------------------------

 ]]]]!EXEMPLO DE ATRIBUIÇAO DE FUNCION             
                      ↓argumento
 funcion criarPessoa(nome) => {
    return {nome}
 }
  > const pessoa = criarPessoa 
    aqui estou atribuindo toda funcao a constante, toda a execulçao
    isso acontece quando n uso() ou seja n execulto a funcao 
  > const pessoa = criarPessoa('jon')
    ja aqui estou atribuindo o objeto que a funcao retornará
    logo a constante passa a ter o return e não a funcao em si.
----------
!]]MAIS EXMEPLOS DE ATRIBUIÇOES

    function criarPessoa(nome) {   // > funcion com argumento nome
    return nome                    //  > retorno nome - argumento
    }

const pessoa = criarPessoa;  // > contante pessoa recebe a funcçao em si criarPessoa
const jon = pessoa('Jon')    // > contante jon recebe a constante pessoa ja execultando a funcion()
const alice = criarPessoa('Alice')
document.write(`${jon}, ${alice}`) 

** funcoes recebem argumentos e retornam valores!
ou seja numa funciona expression  --> const nome = (nomePessoa => {return 'jon'}
o parametro sempre tornará o que for passado a ele posteriormente
---------
!]]MAIS EXMEPLOS DE ATRIBUIÇOES - forma mais simplificada

let criarPessoa = nome => (nome) //funcao => recebe argumento nome e retorn nome, forma simplificad
let daniel = criarPessoa('Daniel Satori')
let alicia = criarPessoa('Alicia Satori')
document.write(`${daniel}, ${alicia}`)
---------

!!]]] Ultimo exmplo funcion CallBack simplificado [js24.fun-callback]
                        ↓callcack - cb
const saudar = (nome, responder) => {
        const horaAtual = new Date().getHours()
        //const responder = resposta => console.log(nome, resposta)

        if (horaAtual <= 12) return responder(nome, 'Bom dia!')    
        if (horaAtual <= 16) return responder(nome, 'Boa tarde!')
        return responder (nome, 'Boa noite!')    
}
const respCb = (nome, resposta) => console.log(nome, resposta)
saudar('Jon', respCb)
--------------
{mais simplifcado}

const saudar = (nome, cb) => {
        const horaAtual =  new Date().getHours();
        if (horaAtual <=12) return cb(nome, 'Bom dia')
        if (horaAtual <=12) return cb(nome, 'Boa tarde')
        return cb(nome, 'Boa noite')
}
saudar('Jon', cback = (nome, resposta) => console.log(nome, resposta))
-------------

[Metodo preventDefault()]

O preventDefault() impede que o evento seja processado normalmente. Com isso, você pode controlar
o que acontece quando o evento é acionado. Um exemplo comum de uso é quando você deseja validar 
os dados dum formulário antes de enviá-lo para o server e evitar que ele seja enviado se houver erro.
Este metodo  previne que seja enviado os dados inseridos no formulario e evita que
o formulario seja recaregado e suma com os dados inseridos
-------------

[]{}FUNCOES COM PARAMETROS VARIAVEIS

Parâmetros variáveis referem-se a uma funcionalidade que permite uma função aceite um número
variável de argumentos. Isso significa que uma função pode ser chamada com diferentes quantid 
de argumentos, sem que seja necessário defini'los explicitamente na sua declaração.

-Parâmetros de rest (rest parameters):
Os parâmetros de rest permitem que vo'c defina uma lista de argumentos variáveis em uma função
usando o operador de três pontos  ...  antes do último parâmetro da função. Esses argumentos 
variáveis são agrupados num array dentro da função.

EX:--
function somar(...nums) {
  let total = 0;
  for (let num of nums) {
    total += num;
  }
  return total;
}

console.log(somar(1, 2, 3));     // Output: 6
console.log(somar(10, 20, 30, 40, 50));    // Output: 150


_______________________________________________________________________

[Matodos nativos pra manipular STRINGS]  (js24-fun-string)

1- .length() - serve para retorna a quantidade de carcteres de uma String
2- .charAt() - busca o caracter da string indicado nos parenteses 
3- .indexOf()- Retorna o índice da primeira ocorrência dum valor especificado numa string
4- .replace()- substituiu carcater/nome indicado por outros ex:  /jon/ gi, 'mary'
5- .subsrt() - usado pra extrair uma part da string ex: (4, 6) recortar da posicao 4 ao 6
6- .toLowerC() - muda a string pra caixa baixa
7- .toUpperC() - muda a string pra caixa alta
8- .trin() - remove todos os espaços da string
9- .concat() - Concatena uma string ao valor - .concat('Bem vindo')
10- .split() - Divide a string em array com base no separador indicado (,)
--------- 

[Metodos para calculos Matematicos .Math] (js25-fun-math)

1- .abs() - Retorna o valor absoluto dum numero -  -5 == 5
2- .floor()- Arredonda o valor para baixo - (5.76) == 5
3- .ceil() - Arredonda o valor para cima - (5.23) == 6
4- .randon() - Retorna uma numer alatorio entre 0 e 1 == 0.56236
5- .Round() - Arredoda o valor para o inteiro mais proximo (5.6) == 6  (5.3) == 5
6- .pow() - Retorna a base elevada ao expoente   Math.pow(5, 2) == 25
7- .sqrt() - Retorna a raiz dum numero (9) == 3
8- .max()  - Retorna o maior valor entre dois numeros - math.max(a=10, b=20) == 20
---------------

[Metodos nativos pra manipular DATAS]  (js27-fun-string)

Para trabalhar com datas em JS temos de criar uma nova instancia
Em JavaScript, uma "instância" refere-se a um objeto específico criado a partir de uma classe
ou construtor. O JavaScript é uma linguagem de programação orientada a objetos, onde os 
objts são criados a partir de classes ou construtores, que são modelos pra a criação de objets.

EX: function Pessoa(nome, idade) {
      this.nome = nome;
      this.idade = idade;
-get serve para obter valores em data
-set serve  para definir valores em uma data

1- getDate(): Retorna o dia do mês (1-31) com base no horário local.
2- getMonth(): Retorna o mês (0-11) com base no horário local. Jan é representado por 0.
3- getFullYear(): Retorna o ano com base no horário local, com 4 dígitos.
4- getHours(): Retorna a hora (0-23) com base no horário local.
5- getMinutes(): Retorna os minutos (0-59) com base no horário local.
6- getSeconds(): Retorna os segundos (0-59) com base no horário local.
7- getMilliseconds(): Retorna os milissegundos (0-999) com base no horário local.
8- getDay(): Retorna o dia da semana (0-6), domingo é representado por 0 e sábado por 6.
9- getTime(): Retorna o valor numérico do tempo representado pela data em milissegundos
desde 1º de janeiro de 1970 (conhecido como "época" ou "timestamp").
10- toString(): Retorna uma string representando a data.
11- toLocaleString(): Retorna uma string representando a data em formato localizado,
de acordo com a configuração regional do sistema.

}///ADICIOANR OU REMOVER DIAS DA DATA!
    let data = new Date();
    document.write(data.toString() + '<hr>')
    // editando dia data
    data.setDate(data.getDate()+1)  // aqui foi adiconado mais 1 dia as data atual 
    document.write(data.toString()) // aqui foi impresso data atual atualizada mais 1
** essa tecnica pode ser aplciada a meses anos, horas e segundos...

crtl + shift + k = apaga linha
crrtl + shift + L = edita todos os nomes
ul>li*5>a*1 = para aninha lista entre outros
------------

_______________________________________________________________________

}}[METODOS. OBEJTOS (PROPRIEDADE]

Em JS, os objetos são usados pra representar entidades do mundo real ou conceitos abstratos.
Cada objeto tem suas próprias propriedades, que são características ou atributos do objeto.
As (propriedades) podem ser valores primitivos, como números ou strings, ou outras referências
a objetos. Os objetos também podem ter .métodos(), que são funções associadas ao objeto q podem
ser chamadas para executar alguma tarefa específica relacionada a esse objeto.

O método de um objeto em JavaScript é simplesmente uma função que é associada a um objeto.
Os métodos são definidos dentro do corpo do objeto e são chamads com a notação de ponto (".")
após o nome do objeto. Por exemplo, se tivermos um objeto "carro" com um método "acelerar",
podemos chamá-lo da seguinte maneira:
     
let carro = {
  velocidade: 0,
  acelerar: function() {
    this.velocidade += 10;
  }
↓objeto ↓metodo - ↓propriedad
carro.acelerar   ();    // aumenta a velocidade em 10


]] EVETNOS JS

Eventos em JavaScript são ações que ocorrem em um elemento da página web com a iteração do usuario
como um clique num botão, pressionar uma tecla, mover o mouse sobre elementos, carregar uma página..

O JavaScript pode "escutar" (ou "capturar") esses eventos e, em seguida, executar uma função
específica (conhecida como "handler" ou "callback") quando o evento ocorre. Essa função pode
fazer qualquer coisa, como alterar o conteúdo da página, enviar uma solicitação de servidor,
exibir uma mensagem de alerta, etc.

[EVENTOS DE MOUSE]

click - acionado quando um elemento é clicado com o botão esquerdo do mouse.
dblclick - acionado quando um elemento é clicado duas vezes com o botão esquerdo.
mouseover - acionado quando o cursor do mouse entra em um elemento.
mouseout - acionado quando o cursor do mouse sai de um elemento.
mousemove - acionado quando o cursor do mouse é movido dentro de um elemento.
mousedown - acionado quando o botão do mouse é pressionado dentro de um elemento.
mouseup - acionado quando o botão do mouse é liberado dentro de um elemento.
contextmenu - acionado quando o botão direito do mouse é clicado dentro de um elemento.

[EVENTOS DE TECLADO]

keydown: acionado quando uma tecla é pressionada, antes da letra ou símbolo ser exibido na tela.
keypress: acionado quando uma tecla é pressionada e uma letra ou símbolo é exibido na tela.
keyup: acionado quando uma tecla é solta após ser pressionada.
Além disso, há outros eventos relacionados ao teclado, como:
input: acionado quando o valor de um elemento de formulário é alterado.
focus: acionado quando um elemento de formulário recebe o foco (é clicado).
blur: acionado quando um elemento de formulário perde o foco.

[EVENTOS DE JANELA]

load: acionado quando a página é totalmente carregada, incluindo imagens, scripts etc..
unload: acionado quando a página é fechada ou quando o usuário navega para outra página.
resize: acionado quando a janela do navegador é redimensionada pelo usuário.
scroll: acionado quando a barra de rolagem da página é movida pelo usuário.
focus: acionado quando a janela ou um elemento dentro dela recebe o foco.
blur: acionado quando a janela ou um elemento dentro dela perde o foco.
beforeunload: acionado antes da página ser fechada ou quando o usuário navega para outra página.

[EVENTOS DE FORMULARIO]

submit - acionado quando o formulário é enviado.
reset - acionado quando o botão "Redefinir" é clicado para limpar o formulário.
change - acionado quando o valor de um elemento de formulário é alterado (por exemplo, 
selecionando uma opção em um menu suspenso ou marcando uma caixa de seleção).
focus - acionado quando um elemento de formulário recebe o foco.
blur - acionado quando um elemento de formulário perde o foco.
input - acionado quando um usuário insere texto em um elemento de formulário.
invalid - acionado quando um elemento de formulário é inválido (por exemplo, quando
o usuário não preencheu um campo obrigatório).
_______________________________________________________________________

{}[DOM] document object modelos

[dom - uma API multiplataforma que permite acesso aos elementos HTML -tipo copia fiel do HTML]
O DOM (Document Object Model) é uma interface de programação para documentos HTML e XML.
É uma representação estruturada do documento, onde cada elemento do documento é tratado
como um objeto dentro da árvore DOM.
    O DOM permite que os programadores acessem, modifiquem e manipulem os elementos de um 
documento HTML ou XML usando linguagens de programação, como JavaScript. Ele fornece métodos
e propriedades para interagir com os elementos da página, permitindo a criação dinâmica 
de conteúdo, alterações de estilo, manipulação de eventos, entre outras ações.

_______________________________________________________________________

[] TRY, CATCH, THROW, FINALLY - Trantando erros

try {}: Bloco usado para envolver o código que pode gerar uma exceção ou erro.
catch (){}: Bloco usado para capturar e tratar exceções q ocorrem dentro do bloco try.
throw {} é usada para criar e lançar manualmente um objeto de exceção, que pode conter 
informações detalhadas sobre o erro ou situação excepcional ocorrida, permitindo que 
DEVs criem tratamentos personalizds para essas ocorrências. 'Normalmente Dentro do catch'
finally {}: Bloco opcional que contém código executado sempre após o bloco try, 
independentemente de exceções serem lançadas ou não.

try {
  // Código que pode gerar uma exceção
  const result = 10 / 0; // Isso causará uma exceção de divisão por zero
} catch (error) {
  // Bloco para lidar com a exceção
  console.error("Ocorreu um erro:", error.message);
} finally {
  // Bloco que será executado sempre, independentemente da exceção
  console.log("Fim do bloco try-catch-finally.");
}
QUANDO USAR ?]
A necessidade de usar try, catch e finally surge quando você deseja lidar com exceções
de forma controlada e garantir que certas tarefas de limpeza ou encerramento sejam sempre
executadas, independentemente de ocorrer uma exceção ou não.

_______________________________________________________________________

[]BOM - Browser Object Model - js

O BOM é uma parte do JavaScript que fornece objetos e métodos para interagir com 
o navegador web, permitindo que os desenvolvedores controlem e manipulem a janela do 
navegador, o histórico, as informações da barra de status, os cookies e muito mais.

Alguns dos objetos mais comuns no BOM incluem:

]window: Representa a janela do navegador e é o objeto raiz do BOM.
    }window.open() paremets = 'URL', 'name', 'size'
     window.close()
]document: Representa a página HTML carregada na janela e permite a manipulação do conteúdo.
]navigator: Fornece informações sobre o navegador usado pelo usuário.
]location: Permite interagir com a URL atual da página.
]history: Da acesso ao histórico do navegador, permitindo navegação retroativa e progressiva.

----------
() window.screen 
 é uma propriedade do objeto global window e fornece informações sobre a tela do dispositivo 
 em que o navegador está sendo executado. Onde os elementos HTML são renderizados''
 Essas informações podem ser úteis para ajustar a aparência e o comportamento do conteúdo 
 do site ou aplicativo com base nas capacidades e dimensões da tela do usuário.

Propriedades:

]screen.width: Largura da tela do dispositivo em pixels.
]screen.height: Altura da tela do dispositivo em pixels.
]screen.availWidth: Largura disponível da tela em pixels, desconsiderando barras e elementos extras.
]screen.availHeight: Altura disponível da tela em pixels, desconsiderando barras e elementos extras.
]screen.colorDepth: Número de cores disponíveis na tela.
]screen.pixelDepth: Número de bits usados para representar a cor de um pixel.
-----------

() window.location
um objeto que representa a URL do navegador atual. Ele fornece acesso e controle sobre 
a URL da página em que o script está sendo executado. 

]window.location.href: A URL completa da página.
]window.location.protocol: O protocolo utilizado (por exemplo, "http:", "https:").
]window.location.host: O nome do host e o número da porta.
]window.location.pathname: O caminho da URL após o nome do host.
]window.location.search: Os parâmetros de consulta da URL (se houver algum).
]window.location.hash: O fragmento ou âncora da URL (por exemplo, "#secao1").

Além disso, o objeto window.location possui métodos que podem ser usados para redirecionar 
o navegador para outra página ou recarregar a página atual, 
como window.location.assign(), 
window.location.replace() 
window.location.reload().
-----------
() setTimeout - setInterval

]setTimeout: A função setTimeout é usada para atrasar a execução de um trecho de código
por um certo período de tempo. Você fornece uma função que deseja executar e um tempo
em milissegundos. Após o intervalo de tempo especificado, a função será executada uma vez.

]setInterval: A função setInterval é usada para executar repetidamente uma função em 
intervalos regulares. Você fornece uma função e um intervalo de tempo em milissegundos.

let tempo = setTimeout(() => {
                res.innerHTML += 'Guten tag!'
           }, 5000)

E atribuindo um desses setTimeout a uma vaqriavel podemos limpar o tempo depois dum 
periodo adicionado a função    clearInterval(nome da varivel) ou clearTimeout;

_______________________________________________________________________

[{ECAMA-SCRIPT}] ES6 

A especificação do ECMAScript define as regras e funcionalidades da linguagem, incluindo 
a sintaxe, tipos de dados, objetos, operadores e muito mais. As versões do ECMAScript são 
numeradas, e cada nova versão traz melhorias, adições e correções à linguagem.
O ECMAScript é a base para muitas linguagens de programação de alto nível usadas no 
desenvolvimento web, como JavaScript. JavaScript é a implementação mais comum do ECMAScript
e é amplamente utilizado tanto no lado do cliente (navegador) quanto no lado do servidor 
(Node.js) para criar aplicações web interativas e dinâmicas.

[]  Operadores de declaração de variáveis Var e let

Entendendo como funciona o escopo dos codigos

O escopo no JavaScript se refere à visibilidade e acessibilidade de variáveis, funções e outros
identificadores em diferentes partes do código. O escopo controla onde uma variável ou função 
pode ser referenciada e modificada, evitando conflitos e garantindo a integridade do código.

-Escopo Global: Variáveis definidas fora de funções são acessíveis em todo o código.
-Escopo de Função: Variáveis declaradas dentro de uma função só são visíveis dentro dela.
-Escopo de Bloco: Variáveis definidas com let ou const só são acessíveis dentro do bloco 
de código onde foram criadas.

EX:
let globalVar = 10;  //- Escopo global

function exampleFunction() {
    let localVar = 20;  // Escopo local da função

    if (true) {
        let blockVar = 30;  // Escopo de bloco
        console.log(blockVar);  // Será impresso: 30
    }

[]VAR - eleve qualquer declaração 
ao contrário das declarações de variáveis let e const, a declaração de variável var não possui
escopo de bloco. Isso significa que, quando você declara uma variável com var dentro de um bloco 
(como dentro de um if, for ou qualquer outro bloco), essa variável será elevada (hoisting) 
para o escopo da função ou escopo global em que essa declaração está contida.

[]Então criando uma VAR dentro dum escopo de bloco esta será acessivel no escopo global
e consequentemente tambem poderá ser acessada dentro de escopso de função

[]Sabendo disso caso crie um VAR dentro de um bloco dentro de uma função esta VAR só ficará
acessivel no escopo de função e não no global

[] O LET diferente do VAR e usado para presever privar uma varivel onde ela foi criada, 
impedido que seja acessada noutras partes do codigo

[]Sobre posição de valor das variaveis
Caso crie uma varivel global onde um valor X ----> VAR icon = XX
Então dentro de um escopo de bloco faça a mesma var com um valor diferent ----> VAR icon = YY
A VAR do escopo de bloco será içada para fora fazendo comq a VAR icon valha --> YY em todo codigo
 //se usar o VAR a variavel do block será içada para fora sobreponde outra com mesmo nome
            //caso use let no escopo de bloco está será preservada apenas para o bloco
            //Com isso e prevferivel usar sempre let para preservas as varivaveis em seus blocks

() Uso da contante no Script- para deixar variaveis sempre inauteraveis fazendo com que
o codifo fique mais confiavel e seguro
Como boa pratica é bom declarar const com caracter maiuculo ---> const MAX_VALUE = 1.14

[]   // posso atribuir valores aos parametros da função 
    // caso o parametro posteriormente n seja inserido ele terá um valor pre-definido

        function histo(nome = '(Nome não inserido)', idade = '(Idade não inserida)') {

            document.write(`Oi meu nome é ${nome} eu tenho ${idade}`)
        }

        histo('Jon', '24 anos');
        // posso definiir os parametros da chamada da funcao como (undefined) com isso
        o parametro mostrar o nome atribuindo ateriormente a funcão
_______________________________________________________________________

[] OO - Orientação A Objetos

Orientação a objetos é um paradigma de programação utilizado no desenvolvimento de 
software. Ele se baseia no conceito de "objetos", que são unidades independentes 
que encapsulam dados e comportamentos relacionados.

[]Pilares da orientação a objetos

-Abstração
Consiste em conhecer as coisas do mundo real e trazehas para nosso sistema
Significa abstrair, criar os objetos do mundos real de forma simplificada dando valor ao 
que é importante para o projeto especifico. Mesmo quando o projeto a ser criado traga algo que 
não é fisico, pdemos usar nosso connheciment pra abtrair daquilo o que poder ser imaginariamente 
tangivel. Com isso somente os aspectos mais relevantes são considerantes na resoluçao de problemas

-Emcapsulamento
Significa emcapsular dados(atributos) metodos(funcoes) que operam sobre esses dados em uma 
unica unidade chamada classe, esse escapsulamento projete os dados duma classe permitindo 
que só sejam acessados a partir da chamada da classe, pomovendo maior segurança.

-Herança
Esta permite que uma classe herde atritubutos de outra se colocando no lugar de subclasse. 
E a classe da qual ela erda é chamada de super classe. A herança facilita e reutilizacao de codigo

-Polimorfismo
Este permite que objetos de diferentes classe sejam tratados como objetos duma mesma classe, 
simplificando a orientaçã ode objetos variados. Isso é feito a partir da criaçã ode objetos 
com a mesma assinatura e (nome e parametros) em classe diferentes mas com implementaçã oespecifica 
para cada classe.


Os principais conceitos da programação orientada a objetos são:

]Classe: Uma classe é um modelo ou uma "receita" para criar objetos. Ela define os 
atributos (dados) e métodos (ações/comportamentos) que os objetos desse tipo podem ter.

]Objeto: Um objeto é uma instância duma classe. Ele representa uma entidade do mundo real
ou um conceito abstrato e contém dados específicos e métodos que podem ser executados nesses dados.

]Encapsulamento: Esse conceito envolve o empacotamento de dados (atributos) e métodos que operam
nesses dados em uma única unidade chamada objeto. O encapsulamento ajuda a proteger os dados 
internos de uma classe, permitindo que apenas os métodos definidos nessa classe possam acessá-los.

]Polimorfismo: O polimorfismo permite que objetos de diferentes classes sejam tratados de maneira
 uniforme por meio de interfaces comuns. Isso significa que diferentes classes podem implementar 
 métodos com o mesmo nome, mas com comportamentos específicos para cada classe.

]Método: Um método é uma função associada a uma classe que define uma ação que os objetos dessa 
classe podem realizar.

---A programação orientada a objetos tem como objetivo principal facilitar o desenvolvimento 
de software, tornando-o mais modular, reutilizável e compreensível

[] Em JavaScript, um construtor é uma função especial que é usada para criar e inicializar
objetos. É uma parte fundamental da programação orientada a objetos em JavaScript. 
Usar construtores ajuda a criar objetos com estruturas consistentes e permite reutilizar 
o mesmo código para criar múltiplas instâncias do mesmo tipo de objeto. 

_______________________________________________________________________

[] Reflexão sobre abstração a ENTIDADE 

Ao refletirmos sobre projetos e seus respectivos objetos para criar uma palicação devemos
abstrair deles o que realemnte é importante para empresa e assim aplicar na construçã oda aplicação

-- Paradigma procedural
O termo "procedural" refere-se a um método ou abordagem que envolve a execução sequencial 
de passos ou procedimentos para atingir um determinado objetivo ou resultado. 
-- O paradigma orientado a objetos (POO) 
Um estilo de programação que se baseia na concepção e organização de software em torno de 
"objetos", que são representações de entidades do mundo real ou abstrações conceituais. 
O paradigma orientado a objetos é uma abordagem poderosa que visa modelar problemas 
complexos de maneira mais intuitiva e modular,

---Atributos:
Atributos, também conhecidos como campos ou propriedades, são as características dos objetos.
---Métodos:
Métodos são as funções associadas a uma classe que definem o comportamento do objeto. 

[] Emcapsulamento de Objetos 
O encapsulamento é um dos princípios fundamentais da programação orientada a objetos (POO). 
Ele se refere à prática de esconder os detalhes internos de um objeto e fornecer uma interface 
controlada para interagir com esse objeto. Isso significa que os detalhes internos do 
funcionamento do objeto, como seus atributos e métodos, não devem ser acessíveis diretamente 
fora da classe em que o objeto foi definido.

Como não é possivel usar o metodos PRIVATE em javascript um  _ this._canalAtivo = 5, no atributo
do construtor() indicando assim que aquele atributo é privado, e tambem imperdir que este seja
acessado diretamento

--------
{{}ATRIBUTOS ACESSORES - nos permiter ter acesso aos itens da nossa class (GET- SET)

()Os getters e setters [PseudoVariaveis]
em JavaScript são métodos especiais que permitem controlar o acesso e a modificação de 
propriedades de um objeto. Eles fornecem uma maneira de implementar a lógica personalizada 
para obter (get) e definir (set) valores de propriedades, em vez de acessá-los diretamente. 
Isso é especialmente útil quando você deseja realizar validações, cálculos ou aplicar lógica 
adicional ao acessar ou atribuir valores.
Basicamanete o GET disponibilita o acesso dos parametros do OBJETO
E o SET possibilita a modificação dos objetos, eles são definitos dentro do obejto
para que as modificaçoes possam ser feitas fora do obejto.

-IMPORTANTE - Durante a criação dum projeto é sempre importante ler a analisa o codigo
para que se possivel ele possa ser refatorado e simplificado!


[] Erança de Objetos

O princípio da herança na POO é um conceito que permite criar novas classes baseadas em classes 
já existentes. Ele promove a reutilização de código, a organização eficiente e a hierarquia de 
classes, tornando o código mais modular e fácil de manter.
Na herança, uma classe chamada "subclasse" pode herdar características (métodos e propriedades) 
de uma classe chamada "classe pai" ou "superclasse".

Crio um objeto pais animal com caracteristicas em comuns de animais
depois faço as classes de animais separadamente, depois Herdo a elas os atributos
da classe animal, assim reutilizando e evitando a repetição de codigo  EX:( extends + Nome da classe)
Na classe filha do animal criado usso nome (extends + nome da classe pai)

class Passaro extends Animal {
            constructor() {
                this.bico = 'curto';
            }

Tambem adiciono o metodo super() Às classes filhas para conclir a Herança
O comando super() é usado para chamar o construtor da superclasse, ou seja, a classe pai.

_______________________________________________________________________

][LÓGICA DE PROGRAMÇAO]

Num algoritmo deve-se comsiderar todos os passos ate os mais simples
Os programas e APPS são algoritimos escritos numa linguagem de programção (JS, C# JAVA, PYTHON..)
São escritos coa funçao de criar solucoes ao nosso dia-a-dia e são sempre bem rigorosos e especificos

]PSEUDOCODIGO
É uma forma generica de escrever um algoritmo
Um pseudo codigo com algoritmo bem feito serpa facil de se interpretar podendo ser codificado
codado em qualquer linguagem. 

]BOAS PRATICAS PESEUDOCÓDIGO
Usar palavras-chave simples e diretas para descrever as ações, como "leia", "escreva", "se",
"enquanto", "para", etc.
Usar indentação e/ou chaves para indicar a estrutura do código, como em uma linguagem de programação.

Usar comentários para explicar partes complexas do algoritmo ou para adicionar informações adicionais.

Usar variáveis ou símbolos descritivos para representar valores ou objetos em vez de números
 ou nomes específicos.

] Regras para criar ALGORITMO

1- Usar somente um verbo por frase
2- Imaginar que está desenvolvendo algoritmo para pessoas q não trabalhar com informatica
3- Usar frases curtas
4- Ser objetivo
5- Usar palavrar que não tenha setidos dubio

EX: algoritmo - Tirar lampada

1 pegar escada / 2 posicionar escada / 3 subir escada / 4 desenrroscar lampada 
5 descer escada / 6 quardar escada / 7 jogar lampda lixo


